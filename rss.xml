<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Tue, 02 Jul 2024 07:41:36 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[Code Analysis of HR Sherlock and Anagrams problem solution]]></title>
            <guid>2107657484a54bd689b379c39e69961c</guid>
            <pubDate>Tue, 02 Jul 2024 06:55:39 GMT</pubDate>
            <content:encoded><![CDATA[<p>Given the solution code :</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.io.*;
<span class="hljs-keyword">import</span> java.math.*;
<span class="hljs-keyword">import</span> java.security.*;
<span class="hljs-keyword">import</span> java.text.*;
<span class="hljs-keyword">import</span> java.util.*;
<span class="hljs-keyword">import</span> java.util.concurrent.*;
<span class="hljs-keyword">import</span> java.util.regex.*;

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> {

    <span class="hljs-comment">/*
     * Complete the 'sherlockAndAnagrams' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING s as parameter.
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sherlockAndAnagrams</span><span class="hljs-params">(String s)</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();

        <span class="hljs-comment">// Generate all possible substrings and count the occurrences of each substring</span>
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) {
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt;= s.length(); j++) {
                <span class="hljs-type">String</span> <span class="hljs-variable">currentSub</span> <span class="hljs-operator">=</span> s.substring(i, j);
                <span class="hljs-type">String</span> <span class="hljs-variable">sortedSub</span> <span class="hljs-operator">=</span> sortString(currentSub);

                <span class="hljs-keyword">if</span> (map.containsKey(sortedSub)) {
                    count += map.get(sortedSub);
                    map.put(sortedSub, map.get(sortedSub) + <span class="hljs-number">1</span>);
                } <span class="hljs-keyword">else</span> {
                    map.put(sortedSub, <span class="hljs-number">1</span>);
                }
            }
        }

        <span class="hljs-keyword">return</span> count;
    }

    <span class="hljs-comment">// Helper method to sort a string</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">sortString</span><span class="hljs-params">(String str)</span> {
        <span class="hljs-type">char</span>[] charArray = str.toCharArray();
        Arrays.sort(charArray);
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(charArray);
    }

}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException {
        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));
        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(System.getenv(<span class="hljs-string">"OUTPUT_PATH"</span>)));

        <span class="hljs-type">int</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> Integer.parseInt(bufferedReader.readLine().trim());

        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">qItr</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; qItr &lt; q; qItr++) {
            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> bufferedReader.readLine();

            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Result.sherlockAndAnagrams(s);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedReader.close();
        bufferedWriter.close();
    }
}</code></pre></div>
<p><strong>Sample Input</strong></p>
<pre style="background:linear-gradient(to right, #F3F7EC, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
2
abba
abcd
</pre>
<p><strong>Sample Output</strong></p>
<pre style="background:linear-gradient(to right, #FFE6E6, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
4
0
</pre>
<h2 id="elucidation">Elucidation</h2>
<p>Explanation of the provided Java code above:</p>
<ol>
<li>
<p><strong><code>Result</code> Class:</strong></p>
<ul>
<li>Contains the <code>sherlockAndAnagrams</code> method that calculates the number of anagrammatic pairs of substrings in the given string <code>s</code>.</li>
<li>It uses a <code>HashMap</code> to store the sorted substrings and their occurrences for counting anagram pairs.</li>
<li>The method generates all possible substrings of <code>s</code>, sorts each substring, and counts the occurrences of anagrams.</li>
</ul>
</li>
<li>
<p><strong><code>sortString</code> Method:</strong></p>
<ul>
<li>Private helper method in the <code>Result</code> class to sort the characters of a string.</li>
<li>Used to sort each substring before storing it in the map for accurate comparison of anagrams.</li>
</ul>
</li>
<li>
<p><strong><code>Solution</code> Class:</strong></p>
<ul>
<li>Contains the <code>main</code> method that reads input from the user, calls the <code>sherlockAndAnagrams</code> method, and writes the results to an output file.</li>
<li>Reads the number of queries <code>q</code>, followed by <code>q</code> strings <code>s</code> to analyze for anagram pairs.</li>
<li>For each query, it calculates the number of anagram pairs using the <code>sherlockAndAnagrams</code> method and writes the result to the output file.</li>
</ul>
</li>
<li>
<p><strong>Execution Flow:</strong></p>
<ul>
<li>The <code>main</code> method reads the input queries and strings from the user.</li>
<li>For each input string, it calls the <code>sherlockAndAnagrams</code> method to calculate the number of anagram pairs.</li>
<li>The result for each query is written to the output file.</li>
</ul>
</li>
<li>
<p><strong>Input and Output Handling:</strong></p>
<ul>
<li>Input: Reads the number of queries <code>q</code> and <code>q</code> strings from the user.</li>
<li>Output: Writes the number of anagram pairs for each query to an output file.</li>
</ul>
</li>
<li>
<p><strong>Overall Functionality:</strong></p>
<ul>
<li>The code efficiently calculates the number of anagrammatic pairs of substrings in the given strings by sorting substrings and using a HashMap for counting occurrences.</li>
<li>It handles input and output operations to process multiple queries and strings to determine anagram pairs.</li>
</ul>
</li>
</ol>
<p>The provided code demonstrates a well-structured solution for finding anagram pairs in strings and efficiently handles input/output operations.</p>
<hr />
<h2 id="hashmap-class"><code>HashMap</code> Class</h2>
<h3 id="hashmap-class-in-java">HashMap Class in Java:</h3>
<ol>
<li>
<p><strong>Definition</strong>:</p>
<ul>
<li><code>HashMap</code> is a class in Java that implements the <code>Map</code> interface to store key-value pairs.</li>
<li>It allows null keys and values, and it does not maintain the order of elements.</li>
</ul>
</li>
<li>
<p><strong>Key Features</strong>:</p>
<ul>
<li><strong>Fast Lookup</strong>: HashMap provides constant-time performance for basic operations like get and put.</li>
<li><strong>Key-Value Pairs</strong>: Each entry in a HashMap is a key-value pair.</li>
<li><strong>Resizable</strong>: HashMap automatically resizes itself when the number of elements exceeds a certain threshold.</li>
<li><strong>Thread-Safe</strong>: HashMap is not synchronized by default. If thread safety is required, you can use <code>Collections.synchronizedMap()</code>.</li>
</ul>
</li>
<li>
<p><strong>Common Methods</strong>:</p>
<ul>
<li><code>put(key, value)</code>: Inserts a key-value pair into the HashMap.</li>
<li><code>get(key)</code>: Retrieves the value associated with the specified key.</li>
<li><code>containsKey(key)</code>: Checks if the HashMap contains a specific key.</li>
<li><code>keySet()</code>: Returns a Set containing all the keys in the HashMap.</li>
<li><code>values()</code>: Returns a Collection containing all the values in the HashMap.</li>
<li><code>remove(key)</code>: Removes the key-value pair associated with the specified key.</li>
</ul>
</li>
<li>
<p><strong>Code Example</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.HashMap;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMapExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-comment">// Create a new HashMap</span>
        HashMap&lt;String, Integer&gt; scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();

        <span class="hljs-comment">// Add key-value pairs to the HashMap</span>
        scores.put(<span class="hljs-string">"Alice"</span>, <span class="hljs-number">95</span>);
        scores.put(<span class="hljs-string">"Bob"</span>, <span class="hljs-number">85</span>);
        scores.put(<span class="hljs-string">"Charlie"</span>, <span class="hljs-number">90</span>);

        <span class="hljs-comment">// Retrieve and print the value for a specific key</span>
        System.out.println(<span class="hljs-string">"Bob's score: "</span> + scores.get(<span class="hljs-string">"Bob"</span>));

        <span class="hljs-comment">// Check if a key exists in the HashMap</span>
        <span class="hljs-keyword">if</span> (scores.containsKey(<span class="hljs-string">"Alice"</span>)) {
            System.out.println(<span class="hljs-string">"Alice's score is present."</span>);
        }

        <span class="hljs-comment">// Remove a key-value pair from the HashMap</span>
        scores.remove(<span class="hljs-string">"Charlie"</span>);

        <span class="hljs-comment">// Iterate over the keys and values in the HashMap</span>
        <span class="hljs-keyword">for</span> (String name : scores.keySet()) {
            System.out.println(name + <span class="hljs-string">"'s score: "</span> + scores.get(name));
        }
    }
}</code></pre></div>
</li>
<li>
<p><strong>Output</strong>:</p>
<div><pre class="hljs"><code>Bob<span class="hljs-string">'s score: 85
Alice'</span>s score <span class="hljs-keyword">is</span> present.
Alic<span class="hljs-string">e's score: 95
Bob'</span>s score: <span class="hljs-number">85</span></code></pre></div>
</li>
<li>
<p><strong>Explanation</strong>:</p>
<ul>
<li>In the code example, we create a HashMap named <code>scores</code> that stores String keys and Integer values.</li>
<li>We add key-value pairs representing names and scores to the HashMap using the <code>put</code> method.</li>
<li>We retrieve and print Bob’s score using the <code>get</code> method.</li>
<li>We check if Alice’s score is present in the HashMap using <code>containsKey</code>.</li>
<li>We remove Charlie’s score from the HashMap using <code>remove</code>.</li>
<li>Finally, we iterate over the keys in the HashMap using <code>keySet</code> and print each name along with their score.</li>
</ul>
</li>
</ol>
<p>This example demonstrates the basic usage of the HashMap class in Java for storing and manipulating key-value pairs. The output shows the retrieved values and messages based on the operations performed on the HashMap.</p>
<hr />
<h2 id="string-class"><code>String</code> Class</h2>
<p>The <code>String</code> class in Java is a fundamental class that represents a sequence of characters. It is widely used for storing and manipulating textual data. Here is a detailed explanation, along with a code example and its output, showcasing the features of the <code>String</code> class in Java:</p>
<ol>
<li>
<p><strong>Explanation:</strong></p>
<ul>
<li>The <code>String</code> class in Java is immutable, meaning that once a <code>String</code> object is created, its value cannot be changed.</li>
<li>Strings in Java are zero-indexed, where the first character is at index 0, the second character is at index 1, and so on.</li>
<li>The <code>String</code> class provides a wide range of methods for various string operations, such as concatenation, comparison, extraction, and manipulation.</li>
</ul>
</li>
<li>
<p><strong>Code Example:</strong></p>
</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-comment">// Creating String objects</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">"Hello, "</span>;
        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">"World!"</span>;
        
        <span class="hljs-comment">// Concatenating strings</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> str1 + str2;
        
        <span class="hljs-comment">// Getting the length of a string</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> result.length();
        
        <span class="hljs-comment">// Extracting a substring</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">sub</span> <span class="hljs-operator">=</span> result.substring(<span class="hljs-number">7</span>);
        
        <span class="hljs-comment">// Checking if a string contains a specific character sequence</span>
        <span class="hljs-type">boolean</span> <span class="hljs-variable">contains</span> <span class="hljs-operator">=</span> result.contains(<span class="hljs-string">"World"</span>);
        
        <span class="hljs-comment">// Converting a string to uppercase</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">upperCase</span> <span class="hljs-operator">=</span> result.toUpperCase();
        
        <span class="hljs-comment">// Displaying the results</span>
        System.out.println(<span class="hljs-string">"Concatenated String: "</span> + result);
        System.out.println(<span class="hljs-string">"Length of String: "</span> + length);
        System.out.println(<span class="hljs-string">"Substring: "</span> + sub);
        System.out.println(<span class="hljs-string">"Contains 'World': "</span> + contains);
        System.out.println(<span class="hljs-string">"Uppercase String: "</span> + upperCase);
    }
}</code></pre></div>
<ol start="3">
<li>
<p><strong>Output Explanation:</strong></p>
<ul>
<li>The code example demonstrates various operations using the <code>String</code> class:
<ul>
<li>Concatenation of two strings.</li>
<li>Retrieving the length of the concatenated string.</li>
<li>Extracting a substring starting from index 7.</li>
<li>Checking if the string contains a specific sequence.</li>
<li>Converting the string to uppercase.</li>
</ul>
</li>
<li>Each operation showcases a different method provided by the <code>String</code> class.</li>
</ul>
</li>
<li>
<p><strong>Output:</strong></p>
</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-attr">Concatenated String:</span> <span class="hljs-string">Hello,</span> <span class="hljs-string">World!</span>
<span class="hljs-attr">Length of String:</span> <span class="hljs-number">13</span>
<span class="hljs-attr">Substring:</span> <span class="hljs-string">World!</span>
<span class="hljs-string">Contains</span> <span class="hljs-attr">'World':</span> <span class="hljs-literal">true</span>
<span class="hljs-attr">Uppercase String:</span> <span class="hljs-string">HELLO,</span> <span class="hljs-string">WORLD!</span></code></pre></div>
<ol start="5">
<li><strong>Summary:</strong>
<ul>
<li>The <code>String</code> class in Java provides a wide range of methods for string manipulation and processing.</li>
<li>It is immutable, efficient, and widely used for storing and working with textual data.</li>
<li>By utilizing various methods of the <code>String</code> class, developers can perform common string operations effectively.</li>
</ul>
</li>
</ol>
<p>In summary, the <code>String</code> class in Java is a versatile and essential class for working with text data. It offers a rich set of methods for string manipulation, making it a powerful tool for handling textual information in Java programs.</p>
<hr />
<h2 id="method-of-java-string-class">Method of Java <code>String</code> Class</h2>
<p>The <code>String</code> class in Java provides many methods for various string operations. As of Java 16, the <code>String</code> class has a total of 78 public methods. These methods cover a wide range of functionalities, including string manipulation, comparison, searching, extraction, modification, and more.</p>
<p>Here are some common categories of methods found in the <code>String</code> class:</p>
<ol>
<li>
<p><strong>Basic Operations:</strong></p>
<ul>
<li><code>length()</code>: Returns the length of the string.</li>
<li><code>charAt(int index)</code>: Returns the character at the specified index.</li>
<li><code>substring(int beginIndex)</code>: Returns a substring starting from the specified index.</li>
<li><code>substring(int beginIndex, int endIndex)</code>: Returns a substring within the specified range.</li>
</ul>
</li>
<li>
<p><strong>Comparison and Searching:</strong></p>
<ul>
<li><code>equals(Object obj)</code>: Compares the string with the specified object for equality.</li>
<li><code>equalsIgnoreCase(String anotherString)</code>: Compares the string with another string, ignoring case.</li>
<li><code>indexOf(String str)</code>: Returns the index of the first occurrence of a substring.</li>
<li><code>contains(CharSequence s)</code>: Checks if the string contains a specified sequence.</li>
</ul>
</li>
<li>
<p><strong>Modification and Concatenation:</strong></p>
<ul>
<li><code>concat(String str)</code>: Concatenates the specified string to the end of the current string.</li>
<li><code>replace(char oldChar, char newChar)</code>: Replaces all occurrences of a character with another character.</li>
<li><code>toUpperCase()</code>: Converts the string to uppercase.</li>
<li><code>toLowerCase()</code>: Converts the string to lowercase.</li>
<li><code>trim()</code>: Removes leading and trailing whitespace.</li>
</ul>
</li>
<li>
<p><strong>Conversion and Splitting:</strong></p>
<ul>
<li><code>valueOf(int i)</code>: Converts an integer to a string.</li>
<li><code>toCharArray()</code>: Converts the string to a character array.</li>
<li><code>split(String regex)</code>: Splits the string into an array of substrings based on a regular expression.</li>
</ul>
</li>
</ol>
<p>These are just a few examples of the methods available in the <code>String</code> class. The comprehensive list of methods provides a wide range of functionalities for working with strings in Java.</p>
<hr />
<h2 id="stringlength-method"><code>String.length()</code> Method</h2>
<ol>
<li>
<p><strong>Explanation:</strong></p>
<ul>
<li>The <code>length()</code> method in Java is a built-in method of the <code>String</code> class that returns the length of the string, i.e., the number of characters in the string.</li>
<li>The length of a string includes all characters, including spaces, special characters, and digits.</li>
<li>The index of the last character in a string is always one less than the length of the string due to zero-based indexing.</li>
</ul>
</li>
<li>
<p><strong>Code Example:</strong></p>
</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringLengthExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">"Hello, World!"</span>;
        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">"Java is fun"</span>;
        
        <span class="hljs-type">int</span> <span class="hljs-variable">length1</span> <span class="hljs-operator">=</span> str1.length();
        <span class="hljs-type">int</span> <span class="hljs-variable">length2</span> <span class="hljs-operator">=</span> str2.length();
        
        System.out.println(<span class="hljs-string">"Length of \""</span> + str1 + <span class="hljs-string">"\": "</span> + length1);
        System.out.println(<span class="hljs-string">"Length of \""</span> + str2 + <span class="hljs-string">"\": "</span> + length2);
    }
}</code></pre></div>
<ol start="3">
<li>
<p><strong>Output Explanation:</strong></p>
<ul>
<li>In the code example, two strings <code>str1</code> and <code>str2</code> are defined with different lengths.</li>
<li>The <code>length()</code> method is called on each string to get the length, and the results are printed.</li>
<li>The output will display the lengths of the two strings, which are the number of characters in each string.</li>
</ul>
</li>
<li>
<p><strong>Output:</strong></p>
</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-attribute">Length</span> of <span class="hljs-string">"Hello, World!"</span>: <span class="hljs-number">13</span>
<span class="hljs-attribute">Length</span> of <span class="hljs-string">"Java is fun"</span>: <span class="hljs-number">11</span></code></pre></div>
<ol start="5">
<li><strong>Summary:</strong>
<ul>
<li>The <code>length()</code> method in Java returns the number of characters in a string.</li>
<li>It is a useful method for determining the size of a string and performing operations based on the length of the string.</li>
<li>The output of the <code>length()</code> method is an integer representing the length of the string.</li>
</ul>
</li>
</ol>
<p>In summary, the <code>String.length()</code> method in Java provides a simple and effective way to determine the length of a string. It is commonly used in various string manipulation tasks to handle and process strings of different lengths.</p>
<hr />
<h2 id="stringsubstring-method"><code>String.substring()</code> Method</h2>
<ol>
<li>
<p><strong>Explanation:</strong></p>
<ul>
<li>The <code>substring()</code> method in Java is a built-in method of the <code>String</code> class used to extract a substring from a given string.</li>
<li>It takes one or two parameters: the starting index (inclusive) and the optional ending index (exclusive) of the substring.</li>
<li>If only one parameter is provided, the substring starting from the specified index to the end of the string is returned.</li>
</ul>
</li>
<li>
<p><strong>Code Example:</strong></p>
</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubstringExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">"Hello, World!"</span>;
        
        <span class="hljs-type">String</span> <span class="hljs-variable">sub1</span> <span class="hljs-operator">=</span> str.substring(<span class="hljs-number">7</span>); <span class="hljs-comment">// Starting from index 7 to the end</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">sub2</span> <span class="hljs-operator">=</span> str.substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// From index 0 to 5 (exclusive)</span>
        
        System.out.println(<span class="hljs-string">"Substring 1: "</span> + sub1);
        System.out.println(<span class="hljs-string">"Substring 2: "</span> + sub2);
    }
}</code></pre></div>
<ol start="3">
<li>
<p><strong>Output Explanation:</strong></p>
<ul>
<li>In the code example, a string <code>str</code> is defined as “Hello, World!”.</li>
<li>The <code>substring()</code> method is called with different parameters to extract substrings.</li>
<li><code>sub1</code> extracts the substring starting from index 7 to the end of the string.</li>
<li><code>sub2</code> extracts the substring from index 0 to 5 (excluding the character at index 5).</li>
</ul>
</li>
<li>
<p><strong>Output:</strong></p>
</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-attribute">Substring</span> <span class="hljs-number">1</span>: World!
<span class="hljs-attribute">Substring</span> <span class="hljs-number">2</span>: Hello</code></pre></div>
<ol start="5">
<li><strong>Summary:</strong>
<ul>
<li>The <code>substring()</code> method in Java is used to extract a portion of a string based on the specified indices.</li>
<li>It provides flexibility to extract substrings starting from a specific index or within a range of indices.</li>
<li>The output of the <code>substring()</code> method is a new string containing the extracted substring.</li>
</ul>
</li>
</ol>
<p>In summary, the <code>String.substring()</code> method in Java is a useful tool for extracting specific parts of a string, allowing for efficient manipulation and processing of string data.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Priority Queue in Java]]></title>
            <guid>c230a96e7906440d89b472ace3ee4da5</guid>
            <pubDate>Mon, 01 Jul 2024 03:43:30 GMT</pubDate>
            <content:encoded><![CDATA[<p>Java Priority Queue code example :</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.ArrayList;
<span class="hljs-keyword">import</span> java.util.List;
<span class="hljs-keyword">import</span> java.util.Scanner;
<span class="hljs-keyword">import</span> java.util.Comparator;
<span class="hljs-keyword">import</span> java.util.PriorityQueue;

<span class="hljs-comment">// Student class representing a student with name, CGPA, and ID</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt; {
    String name;
    <span class="hljs-type">double</span> cgpa;
    <span class="hljs-type">int</span> id;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> cgpa, <span class="hljs-type">int</span> id)</span> {
        <span class="hljs-built_in">this</span>.name = name;
        <span class="hljs-built_in">this</span>.cgpa = cgpa;
        <span class="hljs-built_in">this</span>.id = id;
    }

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;
    }

    <span class="hljs-comment">// Compare students based on CGPA, name, and ID</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student s)</span> {
        <span class="hljs-keyword">if</span> (cgpa == s.cgpa) {
            <span class="hljs-keyword">if</span> (name.compareTo(s.name) == <span class="hljs-number">0</span>) {
                <span class="hljs-keyword">if</span> (id == s.id)
                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (id &gt; s.id)
                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
                <span class="hljs-keyword">else</span>
                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
            } <span class="hljs-keyword">else</span>
                <span class="hljs-keyword">return</span> name.compareTo(s.name);
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cgpa &gt; s.cgpa)
            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
        <span class="hljs-keyword">else</span>
            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    }
}

<span class="hljs-comment">// Priorities class to handle student priorities</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Priorities</span> {
    <span class="hljs-keyword">public</span> ArrayList&lt;Student&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">(List&lt;String&gt; events)</span> {
        PriorityQueue&lt;Student&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();
        <span class="hljs-keyword">for</span> (String i : events) {
            String[] s = i.split(<span class="hljs-string">"\\s"</span>);
            <span class="hljs-keyword">if</span> (s.length &gt; <span class="hljs-number">1</span>) {
                pq.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(s[<span class="hljs-number">1</span>], Double.valueOf(s[<span class="hljs-number">2</span>]), Integer.valueOf(s[<span class="hljs-number">3</span>])));
            } <span class="hljs-keyword">else</span> {
                pq.poll();
            }
        }
        <span class="hljs-keyword">while</span> (pq.size() &gt; <span class="hljs-number">1</span>) {
            System.out.println(pq.poll().name);
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Student&gt;(pq);
    }
}

<span class="hljs-comment">// Main solution class</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Priorities</span> <span class="hljs-variable">priorities</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Priorities</span>();

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">// Read the total number of events from input</span>
            <span class="hljs-type">int</span> <span class="hljs-variable">totalEvents</span> <span class="hljs-operator">=</span> Integer.parseInt(scan.nextLine());
            List&lt;String&gt; events = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();

            <span class="hljs-comment">// Read and store events from input</span>
            readEvents(totalEvents, events);

            <span class="hljs-comment">// Get students based on events and print their names</span>
            List&lt;Student&gt; students = priorities.getStudents(events);
            printStudents(students);
        } <span class="hljs-keyword">catch</span> (Exception e) {
            System.out.println(<span class="hljs-string">"An error occurred: "</span> + e.getMessage());
        }
    }

    <span class="hljs-comment">// Method to read events from input</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readEvents</span><span class="hljs-params">(<span class="hljs-type">int</span> totalEvents, List&lt;String&gt; events)</span> {
        <span class="hljs-keyword">while</span> (totalEvents-- != <span class="hljs-number">0</span>) {
            <span class="hljs-type">String</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> scan.nextLine();
            events.add(event);
        }
    }

    <span class="hljs-comment">// Method to print students' names</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printStudents</span><span class="hljs-params">(List&lt;Student&gt; students)</span> {
        <span class="hljs-keyword">if</span> (students.isEmpty()) {
            System.out.println(<span class="hljs-string">"EMPTY"</span>);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">for</span> (Student st : students) {
                System.out.println(st.getName());
            }
        }
    }
}</code></pre></div>
<p><strong>Sample Input</strong></p>
<pre style="background:linear-gradient(to right, #F3F7EC, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
12
ENTER John 3.75 50
ENTER Mark 3.8 24
ENTER Shafaet 3.7 35
SERVED
SERVED
ENTER Samiha 3.85 36
SERVED
ENTER Ashley 3.9 42
ENTER Maria 3.6 46
ENTER Anik 3.95 49
ENTER Dan 3.95 50
SERVED
</pre>
<p><strong>Sample Output</strong></p>
<pre style="background:linear-gradient(to right, #FFE6E6, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
Dan
Ashley
Shafaet
Maria
</pre>
<h2 id="elucidation">Elucidation</h2>
<p>The provided code is a Java program that demonstrates the use of classes and methods to manage a list of students based on their priorities. Here is a detailed explanation of the code:</p>
<ol>
<li>
<p><strong>Student Class (<code>class Student implements Comparable&lt;Student&gt;</code>)</strong></p>
<ul>
<li>The <code>Student</code> class represents a student with attributes such as name, CGPA, and ID.</li>
<li>The <code>compareTo</code> method is implemented to compare students based on their CGPA, name, and ID.</li>
</ul>
</li>
<li>
<p><strong>Priorities Class (<code>class Priorities</code>)</strong></p>
<ul>
<li>The <code>Priorities</code> class contains the <code>getStudents</code> method, which processes a list of events to prioritize students.</li>
<li>It uses a <code>PriorityQueue</code> to store students based on their priorities.</li>
<li>The method adds students to the priority queue or removes the top student based on the events provided.</li>
<li>It prints the names of the top students in the priority queue.</li>
</ul>
</li>
<li>
<p><strong>Main Solution Class (<code>public class Solution</code>)</strong></p>
<ul>
<li>The <code>Solution</code> class contains the main method that orchestrates the program execution.</li>
<li>It reads the total number of events from the input and stores the events in a list.</li>
<li>It calls the <code>getStudents</code> method from the <code>Priorities</code> class to process the events and obtain the prioritized list of students.</li>
<li>It then prints the names of the prioritized students or “EMPTY” if no students are present.</li>
</ul>
</li>
<li>
<p><strong>Additional Methods</strong></p>
<ul>
<li><code>readEvents</code>: A method to read events from the input and store them in a list.</li>
<li><code>printStudents</code>: A method to print the names of the prioritized students.</li>
</ul>
</li>
<li>
<p><strong>Execution Flow</strong></p>
<ul>
<li>The program starts by reading the total number of events and storing them in a list.</li>
<li>The <code>getStudents</code> method prioritizes students based on the events provided.</li>
<li>The program then prints the names of the prioritized students or “EMPTY” if no students are present.</li>
</ul>
</li>
<li>
<p><strong>Improvements</strong></p>
<ul>
<li>Try-catch blocks are used to handle exceptions and provide error messages if any issues occur during execution.</li>
<li>The code is structured with smaller methods and comments added to explain each section for better readability and maintainability.</li>
</ul>
</li>
</ol>
<p>Overall, the code showcases a structured approach to managing student priorities using classes, methods, and data structures in Java. It demonstrates how to handle and process events to prioritize students effectively.</p>
<hr />
<h2 id="the-priorityqueue-class">The <code>PriorityQueue</code> class</h2>
<p>The <code>PriorityQueue</code> class in Java is an implementation of a priority queue data structure, where elements are processed based on their priority. Lower values are considered higher priority and are processed before higher values. Here is a detailed explanation along with a code example and its output:</p>
<ol>
<li><strong>Code Example:</strong></li>
</ol>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.PriorityQueue;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueueExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-comment">// Create a PriorityQueue of integers</span>
        PriorityQueue&lt;Integer&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();

        <span class="hljs-comment">// Add elements to the PriorityQueue</span>
        pq.add(<span class="hljs-number">30</span>);
        pq.add(<span class="hljs-number">10</span>);
        pq.add(<span class="hljs-number">20</span>);
        pq.add(<span class="hljs-number">5</span>);

        <span class="hljs-comment">// Remove and print elements from the PriorityQueue</span>
        <span class="hljs-keyword">while</span> (!pq.isEmpty()) {
            System.out.println(pq.poll());
        }
    }
}</code></pre></div>
<ol start="2">
<li>
<p><strong>Output Explanation:</strong></p>
<ul>
<li>The code creates a <code>PriorityQueue</code> of integers.</li>
<li>Elements <code>30</code>, <code>10</code>, <code>20</code>, and <code>5</code> are added to the PriorityQueue.</li>
<li>As <code>poll()</code> method is called on the PriorityQueue, elements are removed based on their priority (ascending order).</li>
<li>The elements are printed in ascending order as they are removed from the PriorityQueue.</li>
</ul>
</li>
<li>
<p><strong>Output:</strong></p>
</li>
</ol>
<div><pre class="hljs"><code>5
10
20
30</code></pre></div>
<ol start="4">
<li>
<p><strong>Explanation:</strong></p>
<ul>
<li>Initially, the PriorityQueue contains elements <code>30</code>, <code>10</code>, <code>20</code>, and <code>5</code>.</li>
<li>As elements are removed using the <code>poll()</code> method, the element with the lowest value (highest priority) is removed first.</li>
<li>The output displays the elements in ascending order (<code>5</code>, <code>10</code>, <code>20</code>, <code>30</code>) as they are removed from the PriorityQueue.</li>
</ul>
</li>
<li>
<p><strong>Key Points:</strong></p>
<ul>
<li>Elements in a PriorityQueue are ordered based on their natural ordering or a custom Comparator.</li>
<li>The <code>add()</code> method is used to insert elements into the PriorityQueue, and the <code>poll()</code> method removes and returns the head of the PriorityQueue.</li>
<li>PriorityQueue maintains the elements in a sorted order based on their priority.</li>
</ul>
</li>
</ol>
<p>In summary, the <code>PriorityQueue</code> class in Java provides an efficient way to manage elements based on their priority. It is commonly used in scenarios where elements need to be processed in a specific order. The example demonstrates how to use a PriorityQueue to maintain elements in sorted order based on their priority.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dequeue in Java]]></title>
            <guid>454a52b43d434ebd85f08123b49f7691</guid>
            <pubDate>Mon, 01 Jul 2024 03:17:21 GMT</pubDate>
            <content:encoded><![CDATA[<p>Java Dequeue code example :</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.*;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">// Initialize scanner, deque, map, and get input values</span>
            <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);
            <span class="hljs-keyword">final</span> Deque&lt;Integer&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;Integer&gt;();
            <span class="hljs-keyword">final</span> Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();
            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();
            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> in.nextInt();

            <span class="hljs-comment">// Process input and calculate the result</span>
            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> processInput(in, deque, map, n, m);
            System.out.println(res);
        } <span class="hljs-keyword">catch</span> (Exception e) {
            System.out.println(<span class="hljs-string">"An error occurred: "</span> + e.getMessage());
        }
    }

    <span class="hljs-comment">// Process input and calculate the result</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">processInput</span><span class="hljs-params">(Scanner in, Deque&lt;Integer&gt; deque, Map&lt;Integer, Integer&gt; map, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) {
            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> in.nextInt();
            updateDequeAndMap(deque, map, num, m);

            <span class="hljs-comment">// Update the result based on the current map size</span>
            <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> map.size();
            <span class="hljs-keyword">if</span> (cnt &gt; res) { res = cnt; }
        }
        <span class="hljs-keyword">return</span> res;
    }

    <span class="hljs-comment">// Update deque and map based on the input number</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateDequeAndMap</span><span class="hljs-params">(Deque&lt;Integer&gt; deque, Map&lt;Integer, Integer&gt; map, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> m)</span> {
        deque.addLast(num);
        <span class="hljs-keyword">if</span> (map.containsKey(num)) {
            map.put(num, map.get(num) + <span class="hljs-number">1</span>);
        } <span class="hljs-keyword">else</span> {
            map.put(num, <span class="hljs-number">1</span>);
        }

        <span class="hljs-comment">// Check if deque size exceeds the limit and update map accordingly</span>
        <span class="hljs-keyword">if</span> (deque.size() == m + <span class="hljs-number">1</span>) {
            <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> deque.removeFirst();
            <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> map.get(key);
            <span class="hljs-keyword">if</span> (v == <span class="hljs-number">1</span>) {
                map.remove(key);
            } <span class="hljs-keyword">else</span> {
                map.put(key, v - <span class="hljs-number">1</span>);
            }
        }
    }
}</code></pre></div>
<p><strong>Sample Input</strong></p>
<pre style="background:linear-gradient(to right, #F3F7EC, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
6 3
5 3 5 2 3 2
</pre>
<p><strong>Sample Output</strong></p>
<pre style="background:linear-gradient(to right, #FFE6E6, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
3
</pre>
<h2 id="elucidation">Elucidation</h2>
<p>The provided code is a Java program that reads input values, processes them using a deque (double-ended queue) and a map (hash map), and calculates a result based on the input. Here is a detailed explanation of the code:</p>
<ol>
<li>
<p><strong>Main Method (<code>public static void main(String[] args)</code>)</strong></p>
<ul>
<li>The main method is the entry point of the program.</li>
<li>It initializes a scanner to read input, creates a deque to store integers, creates a map to store integer frequencies, and reads two integers <code>n</code> and <code>m</code> from the input.</li>
<li>It then calls the <code>processInput</code> method to handle the input processing and result calculation.</li>
<li>Any exceptions that occur during program execution are caught and handled by printing an error message.</li>
</ul>
</li>
<li>
<p><strong>Process Input Method (<code>private static int processInput(Scanner in, Deque&lt;Integer&gt; deque, Map&lt;Integer, Integer&gt; map, int n, int m)</code>)</strong></p>
<ul>
<li>This method processes the input values and calculates the final result.</li>
<li>It iterates <code>n</code> times, reading an integer from the input each time.</li>
<li>For each integer, it calls the <code>updateDequeAndMap</code> method to update the deque and map based on the input number.</li>
<li>It calculates the current size of the map and updates the result if the size is greater than the current result.</li>
<li>Finally, it returns the calculated result.</li>
</ul>
</li>
<li>
<p><strong>Update Deque and Map Method (<code>private static void updateDequeAndMap(Deque&lt;Integer&gt; deque, Map&lt;Integer, Integer&gt; map, int num, int m)</code>)</strong></p>
<ul>
<li>This method updates the deque and map based on the input number.</li>
<li>It adds the input number to the end of the deque and increments its frequency in the map.</li>
<li>If the deque size exceeds <code>m + 1</code>, it removes the first element from the deque, updates its frequency in the map accordingly, and removes it from the map if the frequency becomes 0.</li>
</ul>
</li>
</ol>
<p>Overall, the code efficiently processes input integers, maintains a deque of a specified size, and calculates the maximum number of unique integers that can be contained in the deque at any given time. The code structure is modular, making it easier to understand and maintain.</p>
<hr />
<h2 id="the-arraydeque-class">The <code>ArrayDeque</code> Class</h2>
<p>The <code>ArrayDeque</code> class in Java is a resizable-array implementation of the <code>Deque</code> interface. It provides a double-ended queue data structure that allows elements to be added or removed from both ends efficiently. Here is a detailed explanation along with a code example and its output:</p>
<ol>
<li><strong>Code Example:</strong></li>
</ol>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.ArrayDeque;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDequeExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-comment">// Create an ArrayDeque</span>
        ArrayDeque&lt;Integer&gt; arrayDeque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();

        <span class="hljs-comment">// Add elements to the end of the deque</span>
        arrayDeque.addLast(<span class="hljs-number">10</span>);
        arrayDeque.addLast(<span class="hljs-number">20</span>);
        arrayDeque.addLast(<span class="hljs-number">30</span>);

        <span class="hljs-comment">// Add elements to the front of the deque</span>
        arrayDeque.addFirst(<span class="hljs-number">5</span>);
        arrayDeque.addFirst(<span class="hljs-number">2</span>);

        <span class="hljs-comment">// Remove elements from the front and end of the deque</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">firstElement</span> <span class="hljs-operator">=</span> arrayDeque.removeFirst();
        <span class="hljs-type">int</span> <span class="hljs-variable">lastElement</span> <span class="hljs-operator">=</span> arrayDeque.removeLast();

        <span class="hljs-comment">// Display the elements in the deque</span>
        System.out.println(<span class="hljs-string">"Elements in ArrayDeque: "</span> + arrayDeque);

        <span class="hljs-comment">// Get the first and last elements of the deque</span>
        System.out.println(<span class="hljs-string">"First Element: "</span> + firstElement);
        System.out.println(<span class="hljs-string">"Last Element: "</span> + lastElement);
    }
}</code></pre></div>
<ol start="2">
<li>
<p><strong>Output Explanation:</strong></p>
<ul>
<li>The code creates an <code>ArrayDeque</code> and adds elements <code>10</code>, <code>20</code>, and <code>30</code> to the end of the deque.</li>
<li>It then adds elements <code>5</code> and <code>2</code> to the front of the deque.</li>
<li>The <code>removeFirst()</code> method removes the first element <code>2</code>, and the <code>removeLast()</code> method removes the last element <code>30</code>.</li>
<li>The elements in the deque are displayed using <code>System.out.println("Elements in ArrayDeque: " + arrayDeque);</code>, showing <code>[5, 10, 20]</code>.</li>
<li>The first element <code>2</code> and the last element <code>30</code> are displayed using <code>System.out.println("First Element: " + firstElement);</code> and <code>System.out.println("Last Element: " + lastElement);</code> respectively.</li>
</ul>
</li>
<li>
<p><strong>Output:</strong></p>
</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-variable">Elements</span> <span class="hljs-variable">in</span> <span class="hljs-variable">ArrayDeque</span><span class="hljs-operator">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">5</span><span class="hljs-operator">,</span> <span class="hljs-number">10</span><span class="hljs-operator">,</span> <span class="hljs-number">20</span><span class="hljs-punctuation">]</span>
<span class="hljs-built_in">First</span> <span class="hljs-built_in">Element</span><span class="hljs-operator">:</span> <span class="hljs-number">2</span>
<span class="hljs-built_in">Last</span> <span class="hljs-built_in">Element</span><span class="hljs-operator">:</span> <span class="hljs-number">30</span></code></pre></div>
<p>In summary, the <code>ArrayDeque</code> class in Java provides a flexible and efficient way to work with double-ended queues. It allows elements to be added or removed from both ends, making it suitable for various data structure operations. The example demonstrates how to use <code>ArrayDeque</code> to add, remove, and access elements, showcasing its functionality and versatility.</p>
<hr />
<h2 id="hashmap-class"><code>HashMap</code> Class</h2>
<h3 id="hashmap-class-in-java">HashMap Class in Java:</h3>
<ol>
<li>
<p><strong>Definition</strong>:</p>
<ul>
<li><code>HashMap</code> is a class in Java that implements the <code>Map</code> interface to store key-value pairs.</li>
<li>It allows null keys and values, and it does not maintain the order of elements.</li>
</ul>
</li>
<li>
<p><strong>Key Features</strong>:</p>
<ul>
<li><strong>Fast Lookup</strong>: HashMap provides constant-time performance for basic operations like get and put.</li>
<li><strong>Key-Value Pairs</strong>: Each entry in a HashMap is a key-value pair.</li>
<li><strong>Resizable</strong>: HashMap automatically resizes itself when the number of elements exceeds a certain threshold.</li>
<li><strong>Thread-Safe</strong>: HashMap is not synchronized by default. If thread safety is required, you can use <code>Collections.synchronizedMap()</code>.</li>
</ul>
</li>
<li>
<p><strong>Common Methods</strong>:</p>
<ul>
<li><code>put(key, value)</code>: Inserts a key-value pair into the HashMap.</li>
<li><code>get(key)</code>: Retrieves the value associated with the specified key.</li>
<li><code>containsKey(key)</code>: Checks if the HashMap contains a specific key.</li>
<li><code>keySet()</code>: Returns a Set containing all the keys in the HashMap.</li>
<li><code>values()</code>: Returns a Collection containing all the values in the HashMap.</li>
<li><code>remove(key)</code>: Removes the key-value pair associated with the specified key.</li>
</ul>
</li>
<li>
<p><strong>Code Example</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.HashMap;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMapExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-comment">// Create a new HashMap</span>
        HashMap&lt;String, Integer&gt; scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();

        <span class="hljs-comment">// Add key-value pairs to the HashMap</span>
        scores.put(<span class="hljs-string">"Alice"</span>, <span class="hljs-number">95</span>);
        scores.put(<span class="hljs-string">"Bob"</span>, <span class="hljs-number">85</span>);
        scores.put(<span class="hljs-string">"Charlie"</span>, <span class="hljs-number">90</span>);

        <span class="hljs-comment">// Retrieve and print the value for a specific key</span>
        System.out.println(<span class="hljs-string">"Bob's score: "</span> + scores.get(<span class="hljs-string">"Bob"</span>));

        <span class="hljs-comment">// Check if a key exists in the HashMap</span>
        <span class="hljs-keyword">if</span> (scores.containsKey(<span class="hljs-string">"Alice"</span>)) {
            System.out.println(<span class="hljs-string">"Alice's score is present."</span>);
        }

        <span class="hljs-comment">// Remove a key-value pair from the HashMap</span>
        scores.remove(<span class="hljs-string">"Charlie"</span>);

        <span class="hljs-comment">// Iterate over the keys and values in the HashMap</span>
        <span class="hljs-keyword">for</span> (String name : scores.keySet()) {
            System.out.println(name + <span class="hljs-string">"'s score: "</span> + scores.get(name));
        }
    }
}</code></pre></div>
</li>
<li>
<p><strong>Output</strong>:</p>
<div><pre class="hljs"><code>Bob<span class="hljs-string">'s score: 85
Alice'</span>s score <span class="hljs-keyword">is</span> present.
Alic<span class="hljs-string">e's score: 95
Bob'</span>s score: <span class="hljs-number">85</span></code></pre></div>
</li>
<li>
<p><strong>Explanation</strong>:</p>
<ul>
<li>In the code example, we create a HashMap named <code>scores</code> that stores String keys and Integer values.</li>
<li>We add key-value pairs representing names and scores to the HashMap using the <code>put</code> method.</li>
<li>We retrieve and print Bob’s score using the <code>get</code> method.</li>
<li>We check if Alice’s score is present in the HashMap using <code>containsKey</code>.</li>
<li>We remove Charlie’s score from the HashMap using <code>remove</code>.</li>
<li>Finally, we iterate over the keys in the HashMap using <code>keySet</code> and print each name along with their score.</li>
</ul>
</li>
</ol>
<p>This example demonstrates the basic usage of the HashMap class in Java for storing and manipulating key-value pairs. The output shows the retrieved values and messages based on the operations performed on the HashMap.</p>
<hr />
<h2 id="map-interface"><code>Map</code> Interface</h2>
<h3 id="map-interface-in-java">Map Interface in Java:</h3>
<ol>
<li>
<p><strong>Definition</strong>:</p>
<ul>
<li>The <code>Map</code> interface in Java represents a collection of key-value pairs.</li>
<li>It does not allow duplicate keys and each key can map to at most one value.</li>
<li><code>Map</code> is implemented by classes like <code>HashMap</code>, <code>TreeMap</code>, and <code>LinkedHashMap</code>.</li>
</ul>
</li>
<li>
<p><strong>Key Features</strong>:</p>
<ul>
<li><strong>Key-Value Pairs</strong>: Entries in a Map are stored as key-value pairs.</li>
<li><strong>Methods</strong>: Provides methods for adding, removing, and retrieving elements based on keys.</li>
<li><strong>Iterability</strong>: Allows iteration over keys, values, or entries.</li>
<li><strong>No Duplicate Keys</strong>: Ensures that each key is unique within the Map.</li>
</ul>
</li>
<li>
<p><strong>Common Methods</strong>:</p>
<ul>
<li><code>put(key, value)</code>: Inserts a key-value pair into the Map.</li>
<li><code>get(key)</code>: Retrieves the value associated with the specified key.</li>
<li><code>containsKey(key)</code>: Checks if the Map contains a specific key.</li>
<li><code>keySet()</code>: Returns a Set containing all the keys in the Map.</li>
<li><code>values()</code>: Returns a Collection containing all the values in the Map.</li>
<li><code>entrySet()</code>: Returns a Set containing all key-value mappings in the Map.</li>
</ul>
</li>
<li>
<p><strong>Code Example</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.HashMap;
<span class="hljs-keyword">import</span> java.util.Map;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapInterfaceExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-comment">// Create a new HashMap implementing the Map interface</span>
        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();

        <span class="hljs-comment">// Add key-value pairs to the Map</span>
        map.put(<span class="hljs-string">"A"</span>, <span class="hljs-number">1</span>);
        map.put(<span class="hljs-string">"B"</span>, <span class="hljs-number">2</span>);
        map.put(<span class="hljs-string">"C"</span>, <span class="hljs-number">3</span>);

        <span class="hljs-comment">// Retrieve and print the value for a specific key</span>
        System.out.println(<span class="hljs-string">"Value for key 'B': "</span> + map.get(<span class="hljs-string">"B"</span>));

        <span class="hljs-comment">// Check if a key exists in the Map</span>
        <span class="hljs-keyword">if</span> (map.containsKey(<span class="hljs-string">"A"</span>)) {
            System.out.println(<span class="hljs-string">"Key 'A' is present."</span>);
        }

        <span class="hljs-comment">// Iterate over the entries in the Map</span>
        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) {
            System.out.println(<span class="hljs-string">"Key: "</span> + entry.getKey() + <span class="hljs-string">", Value: "</span> + entry.getValue());
        }
    }
}</code></pre></div>
</li>
<li>
<p><strong>Output</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-built_in">Value</span> <span class="hljs-variable">for</span> <span class="hljs-variable">key</span> <span class="hljs-operator">'</span><span class="hljs-variable">B</span><span class="hljs-operator">':</span> <span class="hljs-number">2</span>
<span class="hljs-built_in">Key</span> <span class="hljs-operator">'</span><span class="hljs-variable">A</span><span class="hljs-operator">'</span> <span class="hljs-variable">is</span> <span class="hljs-variable">present</span><span class="hljs-operator">.</span>
<span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-variable">A</span><span class="hljs-operator">,</span> <span class="hljs-built_in">Value</span><span class="hljs-operator">:</span> <span class="hljs-number">1</span>
<span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-variable">B</span><span class="hljs-operator">,</span> <span class="hljs-built_in">Value</span><span class="hljs-operator">:</span> <span class="hljs-number">2</span>
<span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-built_in">C</span><span class="hljs-operator">,</span> <span class="hljs-built_in">Value</span><span class="hljs-operator">:</span> <span class="hljs-number">3</span></code></pre></div>
</li>
<li>
<p><strong>Explanation</strong>:</p>
<ul>
<li>In the code example, we create a HashMap that implements the Map interface with String keys and Integer values.</li>
<li>We add key-value pairs to the Map using the <code>put</code> method.</li>
<li>We retrieve and print the value associated with the key “B” using the <code>get</code> method.</li>
<li>We check if the key “A” is present in the Map using <code>containsKey</code>.</li>
<li>We iterate over the entries in the Map using <code>entrySet</code> and print each key-value pair.</li>
</ul>
</li>
</ol>
<p>This example demonstrates the usage of the Map interface in Java for storing and manipulating key-value pairs. The output shows the retrieved values and messages based on the operations performed on the Map.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Comparator in Java]]></title>
            <guid>688effb55ac84835a9c2ee0c825883ef</guid>
            <pubDate>Mon, 01 Jul 2024 02:17:45 GMT</pubDate>
            <content:encoded><![CDATA[<p>Java Comparator code example :</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.*;

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Checker</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Player&gt; {
    <span class="hljs-comment">// Compare method to compare Player objects based on score and name</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Player a, Player b)</span> {
        <span class="hljs-keyword">if</span> (a.score == b.score) {
            <span class="hljs-keyword">return</span> a.name.compareTo(b.name); <span class="hljs-comment">// Compare alphabetically if scores are equal</span>
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">return</span> b.score - a.score; <span class="hljs-comment">// Compare scores in decreasing order</span>
        }
    }
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> {
    String name;
    <span class="hljs-type">int</span> score;
    
    Player(String name, <span class="hljs-type">int</span> score) {
        <span class="hljs-built_in">this</span>.name = name;
        <span class="hljs-built_in">this</span>.score = score;
    }
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {

    <span class="hljs-comment">// Main method to execute the program</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-keyword">try</span> {
            <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);
            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> readIntegerInput(scan); <span class="hljs-comment">// Read the number of players</span>

            Player[] players = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Player</span>[n];
            <span class="hljs-type">Checker</span> <span class="hljs-variable">checker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Checker</span>();

            <span class="hljs-comment">// Read player names and scores</span>
            readPlayerDetails(scan, n, players);

            scan.close();

            <span class="hljs-comment">// Sort the players array based on the custom comparator</span>
            Arrays.sort(players, checker);

            <span class="hljs-comment">// Display the sorted player details</span>
            displayPlayerDetails(players);
        } <span class="hljs-keyword">catch</span> (Exception e) {
            System.out.println(<span class="hljs-string">"An error occurred: "</span> + e.getMessage());
        }
    }

    <span class="hljs-comment">// Method to read an integer input from the scanner</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readIntegerInput</span><span class="hljs-params">(Scanner scan)</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scan.nextInt();
        <span class="hljs-keyword">return</span> n;
    }

    <span class="hljs-comment">// Method to read player details (name and score) from the scanner</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readPlayerDetails</span><span class="hljs-params">(Scanner scan, <span class="hljs-type">int</span> n, Player[] players)</span> {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) {
            players[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Player</span>(scan.next(), scan.nextInt());
        }
    }

    <span class="hljs-comment">// Method to display player details after sorting</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayPlayerDetails</span><span class="hljs-params">(Player[] players)</span> {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; players.length; i++) {
            System.out.printf(<span class="hljs-string">"%s %s\n"</span>, players[i].name, players[i].score);
        }
    }
}</code></pre></div>
<p><strong>Sample Input</strong></p>
<pre style="background:linear-gradient(to right, #F3F7EC, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
5
amy 100
david 100
heraldo 50
aakansha 75
aleksa 150
</pre>
<p><strong>Sample Output</strong></p>
<pre style="background:linear-gradient(to right, #FFE6E6, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
aleksa 150
amy 100
david 100
aakansha 75
heraldo 50
</pre>
<h2 id="elucidation">Elucidation</h2>
<p>Here is a detailed explanation of the provided Java code above :</p>
<h3 id="code-explanation">Code Explanation:</h3>
<ol>
<li>
<p><strong>Checker Class</strong>:</p>
<ul>
<li>The <code>Checker</code> class implements the <code>Comparator&lt;Player&gt;</code> interface to define custom comparison logic for <code>Player</code> objects.</li>
<li>The <code>compare</code> method compares two <code>Player</code> objects based on their scores and names.</li>
<li>If the scores are equal, it compares the names alphabetically; otherwise, it compares the scores in decreasing order.</li>
</ul>
</li>
<li>
<p><strong>Player Class</strong>:</p>
<ul>
<li>The <code>Player</code> class represents a player with attributes <code>name</code> and <code>score</code>.</li>
<li>It has a constructor to initialize a player with a name and a score.</li>
</ul>
</li>
<li>
<p><strong>Solution Class</strong>:</p>
<ul>
<li>The <code>Solution</code> class contains the main method to execute the program.</li>
<li>It reads the input using a <code>Scanner</code>, creates an array of <code>Player</code> objects, and instantiates a <code>Checker</code> object for custom sorting.</li>
<li>It then reads player details (name and score) from the input and stores them in the <code>players</code> array.</li>
<li>After reading the input, it closes the <code>Scanner</code> and sorts the <code>players</code> array using the custom comparator.</li>
<li>Finally, it displays the sorted player details by printing their names and scores.</li>
</ul>
</li>
<li>
<p><strong>Error Handling</strong>:</p>
<ul>
<li>The code is wrapped in a try-catch block to handle any exceptions that may occur during runtime.</li>
<li>If an exception occurs, an error message is displayed indicating the type of error.</li>
</ul>
</li>
<li>
<p><strong>Overall Functionality</strong>:</p>
<ul>
<li>The code demonstrates the use of custom comparators and sorting in Java to sort an array of <code>Player</code> objects based on their scores and names.</li>
<li>It showcases how to implement custom comparison logic using the <code>Comparator</code> interface and apply it to sort objects.</li>
</ul>
</li>
<li>
<p><strong>Output</strong>:</p>
<ul>
<li>The output of the program displays the player details sorted based on scores in decreasing order and names alphabetically for equal scores.</li>
</ul>
</li>
</ol>
<p>This code efficiently sorts player objects based on scores and names using a custom comparator. It demonstrates the flexibility of custom sorting logic in Java and the use of comparators for object comparison.</p>
<hr />
<h2 id="what-is-format-string-s-sn-do">What is format string “%s %s\n” do</h2>
<p>The format string “%s %s\n” is used in Java to format a string output with placeholders for two string values followed by a new line character. Here’s what each part of the format string represents:</p>
<ul>
<li><strong>%s</strong>: This is a placeholder for a string value. When the formatted string is printed, this placeholder will be replaced by the actual string value.</li>
<li><strong>" "</strong>: This represents a space character between the two string values. It ensures that there is a space separating the two strings in the output.</li>
<li><strong>\n</strong>: This represents a new line character. It indicates that a new line should be started after printing the two string values with a space in between.</li>
</ul>
<p>In summary, when you use the format string “%s %s\n” with <code>System.out.printf()</code>, it will print two string values with a space between them and then move to a new line for the next output.</p>
<hr />
<h2 id="the-comparator-interface">The <code>Comparator</code> Interface</h2>
<h3 id="comparator-interface-in-java">Comparator Interface in Java:</h3>
<ol>
<li>
<p><strong>Definition</strong>:</p>
<ul>
<li>The <code>Comparator</code> interface in Java is used to define custom comparison logic for objects of a class that do not implement the <code>Comparable</code> interface.</li>
<li>It allows objects to be sorted based on custom criteria specified by the programmer.</li>
<li>The <code>compare</code> method in the <code>Comparator</code> interface is used to compare two objects and determine their order.</li>
</ul>
</li>
<li>
<p><strong>Key Concepts</strong>:</p>
<ul>
<li><strong>Custom Sorting</strong>: Allows objects to be sorted based on criteria other than their natural order.</li>
<li><strong>Flexibility</strong>: Provides flexibility in defining sorting logic for objects.</li>
<li><strong>Reusability</strong>: Comparator instances can be reused for sorting different collections of objects.</li>
<li><strong>Type Safety</strong>: Ensures type safety during sorting operations.</li>
</ul>
</li>
<li>
<p><strong>Code Example</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.*;

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> {
    String name;
    <span class="hljs-type">int</span> score;

    Player(String name, <span class="hljs-type">int</span> score) {
        <span class="hljs-built_in">this</span>.name = name;
        <span class="hljs-built_in">this</span>.score = score;
    }
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">ScoreComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Player&gt; {
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Player a, Player b)</span> {
        <span class="hljs-keyword">return</span> b.score - a.score; <span class="hljs-comment">// Sort players based on score in decreasing order</span>
    }
}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComparatorExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        List&lt;Player&gt; players = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
        players.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Player</span>(<span class="hljs-string">"Alice"</span>, <span class="hljs-number">100</span>));
        players.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Player</span>(<span class="hljs-string">"Bob"</span>, <span class="hljs-number">85</span>));
        players.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Player</span>(<span class="hljs-string">"Charlie"</span>, <span class="hljs-number">95</span>));

        Collections.sort(players, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScoreComparator</span>());

        <span class="hljs-keyword">for</span> (Player player : players) {
            System.out.println(player.name + <span class="hljs-string">" - "</span> + player.score);
        }
    }
}</code></pre></div>
</li>
<li>
<p><strong>Output</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-attribute">Alice</span> - <span class="hljs-number">100</span>
<span class="hljs-attribute">Charlie</span> - <span class="hljs-number">95</span>
<span class="hljs-attribute">Bob</span> - <span class="hljs-number">85</span></code></pre></div>
</li>
<li>
<p><strong>Explanation</strong>:</p>
<ul>
<li>In the code example, the <code>Player</code> class represents a player with a name and a score.</li>
<li>The <code>ScoreComparator</code> class implements the <code>Comparator</code> interface to define sorting based on player scores in decreasing order.</li>
<li>In the <code>main</code> method, a list of <code>Player</code> objects is created and sorted using the <code>ScoreComparator</code>.</li>
<li>The sorted player details are then printed, showing the players in decreasing order of scores.</li>
</ul>
</li>
<li>
<p><strong>Benefits of Comparator</strong>:</p>
<ul>
<li><strong>Custom Sorting Logic</strong>: Allows sorting based on custom criteria.</li>
<li><strong>Separation of Concerns</strong>: Keeps sorting logic separate from the class being sorted.</li>
<li><strong>Flexibility</strong>: Enables sorting objects in different ways without modifying their class implementation.</li>
</ul>
</li>
<li>
<p><strong>Use Cases</strong>:</p>
<ul>
<li>Comparator is commonly used in sorting collections like lists, sets, and arrays of custom objects.</li>
<li>It is used when the natural ordering of objects is not suitable for the sorting requirement.</li>
</ul>
</li>
</ol>
<p>The <code>Comparator</code> interface in Java provides a powerful mechanism for defining custom sorting logic for objects. It enhances the flexibility and reusability of sorting operations in Java collections.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Generic in Java]]></title>
            <guid>39bf69e02b4243afbc3d9d204ec1cce7</guid>
            <pubDate>Mon, 01 Jul 2024 01:58:19 GMT</pubDate>
            <content:encoded><![CDATA[<p>Java Generic code example :</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.lang.reflect.Method;

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Printer</span> {
    
    <span class="hljs-comment">// Method to print elements of an array</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(E[] inputArray)</span> {
        <span class="hljs-comment">// Display array elements</span>
        <span class="hljs-keyword">for</span> (E element : inputArray) {
            System.out.println(element);
        }
    }
}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> {

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> {
        <span class="hljs-keyword">try</span> {
            <span class="hljs-type">Printer</span> <span class="hljs-variable">myPrinter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Printer</span>();
            Integer[] intArray = { <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> };
            String[] stringArray = { <span class="hljs-string">"Hello"</span>, <span class="hljs-string">"World"</span> };
            myPrinter.printArray(intArray);
            myPrinter.printArray(stringArray);
            checkMethodOverloading(); <span class="hljs-comment">// Check if method overloading is allowed</span>
        } <span class="hljs-keyword">catch</span> (Exception e) {
            System.out.println(<span class="hljs-string">"An error occurred: "</span> + e.getMessage());
        }
    }

    <span class="hljs-comment">// Method to check if method overloading is allowed</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkMethodOverloading</span><span class="hljs-params">()</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;

        <span class="hljs-comment">// Iterate through methods in the Printer class</span>
        <span class="hljs-keyword">for</span> (Method method : Printer.class.getDeclaredMethods()) {
            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> method.getName();

            <span class="hljs-comment">// Check if the method name is "printArray"</span>
            <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">"printArray"</span>)) {
                count++;
            }
        }

        <span class="hljs-comment">// Check if there is more than one method with the name "printArray"</span>
        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">1</span>) {
            System.out.println(<span class="hljs-string">"Method overloading is not allowed!"</span>);
        }
    }
}</code></pre></div>
<p><strong>Sample Output</strong></p>
<pre style="background:linear-gradient(to right, #FFE6E6, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
1
2
3
Hello
World
</pre>
<h2 id="elucidation">Elucidation</h2>
<p>Here is a detailed explanation of the provided Java code above :</p>
<h3 id="code-explanation">Code Explanation:</h3>
<ol>
<li>
<p><strong>Printer Class</strong>:</p>
<ul>
<li>The <code>Printer</code> class contains a static method <code>printArray</code> that prints elements of an array.</li>
<li>The method uses generics to accept arrays of any type and iterates through the array to print each element.</li>
</ul>
</li>
<li>
<p><strong>Main Method</strong>:</p>
<ul>
<li>The <code>main</code> method is the entry point of the program.</li>
<li>It instantiates an object of the <code>Printer</code> class and creates Integer and String arrays.</li>
<li>It calls the <code>printArray</code> method of the <code>Printer</code> object to print the elements of both Integer and String arrays.</li>
<li>It then calls the <code>checkMethodOverloading</code> method to check if method overloading is allowed.</li>
</ul>
</li>
<li>
<p><strong>Check Method Overloading</strong>:</p>
<ul>
<li>The <code>checkMethodOverloading</code> method checks if method overloading is allowed for the <code>Printer</code> class.</li>
<li>It iterates through the methods of the <code>Printer</code> class using reflection.</li>
<li>If the method name is “printArray”, it increments the count.</li>
<li>After iterating through all methods, it checks if the count is greater than 1.</li>
<li>If there is more than one method with the name “printArray”, it prints a message indicating that method overloading is not allowed.</li>
</ul>
</li>
<li>
<p><strong>Error Handling</strong>:</p>
<ul>
<li>The code is wrapped in a try-catch block to handle any exceptions that may occur during runtime.</li>
<li>If an exception occurs, an error message is displayed indicating the type of error.</li>
</ul>
</li>
<li>
<p><strong>Overall Functionality</strong>:</p>
<ul>
<li>The code demonstrates the usage of a static method to print elements of an array and checks if method overloading is allowed for a specific method in a class.</li>
<li>It showcases how to use reflection in Java to inspect methods of a class at runtime.</li>
</ul>
</li>
<li>
<p><strong>Output</strong>:</p>
<ul>
<li>The output of the program displays the elements of the Integer and String arrays and indicates whether method overloading is allowed for the <code>printArray</code> method.</li>
</ul>
</li>
</ol>
<p>This code efficiently demonstrates the usage of static methods, generics, reflection, and method checking in Java. It is well-structured and handles method inspection effectively.</p>
<hr />
<h2 id="java-generic">Java <code>Generic</code></h2>
<h3 id="java-generics">Java Generics:</h3>
<ol>
<li>
<p><strong>Definition</strong>:</p>
<ul>
<li>Generics in Java allow classes and methods to operate on objects of various types while providing compile-time type safety.</li>
<li>They enable the use of parameterized types to create classes, interfaces, and methods that operate on objects of specified types.</li>
<li>Generics help in writing reusable and type-safe code by allowing the use of a placeholder type that is specified at compile time.</li>
</ul>
</li>
<li>
<p><strong>Key Concepts</strong>:</p>
<ul>
<li><strong>Type Parameter</strong>: Represents a placeholder for a type that is specified when using the generic class or method.</li>
<li><strong>Type Safety</strong>: Ensures that the code operates on the correct types and prevents type mismatches at compile time.</li>
<li><strong>Code Reusability</strong>: Enables the creation of classes and methods that can work with different types without code duplication.</li>
<li><strong>Compile-Time Checking</strong>: Detects type errors during compilation rather than at runtime.</li>
</ul>
</li>
<li>
<p><strong>Code Example</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T&gt; {
    <span class="hljs-keyword">private</span> T value;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(T value)</span> {
        <span class="hljs-built_in">this</span>.value = value;
    }

    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> value;
    }
}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        Box&lt;Integer&gt; integerBox = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();
        integerBox.setValue(<span class="hljs-number">10</span>);
        System.out.println(<span class="hljs-string">"Integer Value: "</span> + integerBox.getValue());

        Box&lt;String&gt; stringBox = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();
        stringBox.setValue(<span class="hljs-string">"Hello, Generics!"</span>);
        System.out.println(<span class="hljs-string">"String Value: "</span> + stringBox.getValue());
    }
}</code></pre></div>
</li>
<li>
<p><strong>Output</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-built_in">Integer</span> <span class="hljs-built_in">Value</span><span class="hljs-operator">:</span> <span class="hljs-number">10</span>
<span class="hljs-built_in">String</span> <span class="hljs-built_in">Value</span><span class="hljs-operator">:</span> <span class="hljs-variable">Hello</span><span class="hljs-operator">,</span> <span class="hljs-variable">Generics</span><span class="hljs-operator">!</span></code></pre></div>
</li>
<li>
<p><strong>Explanation</strong>:</p>
<ul>
<li>In the code example, the <code>Box</code> class is defined with a type parameter <code>T</code> to create a generic class.</li>
<li>The <code>Box</code> class has methods to set and get the value of type <code>T</code>.</li>
<li>In the <code>main</code> method, instances of <code>Box</code> are created with specific types (<code>Integer</code> and <code>String</code>).</li>
<li>Values are set and retrieved using the <code>Box</code> instances, demonstrating type safety and reusability of the generic class.</li>
</ul>
</li>
<li>
<p><strong>Benefits of Generics</strong>:</p>
<ul>
<li><strong>Type Safety</strong>: Ensures that the code operates on the correct types, reducing runtime errors.</li>
<li><strong>Code Reusability</strong>: Allows the creation of generic classes and methods that work with different types.</li>
<li><strong>Performance</strong>: Eliminates the need for type casting, improving code readability and performance.</li>
</ul>
</li>
<li>
<p><strong>Use Cases</strong>:</p>
<ul>
<li>Generics are commonly used in collections like <code>List</code>, <code>Set</code>, and <code>Map</code> to store and retrieve elements of specific types.</li>
<li>They are used in classes like <code>Optional</code>, <code>Future</code>, and <code>Stream</code> to work with different types in a type-safe manner.</li>
</ul>
</li>
</ol>
<p>Generics in Java provide a powerful way to create reusable and type-safe code that can work with different types. They enhance code readability, maintainability, and type safety.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Hashset in Java]]></title>
            <guid>7cf886b6c0d3495c870119f695b6cf62</guid>
            <pubDate>Mon, 01 Jul 2024 01:38:22 GMT</pubDate>
            <content:encoded><![CDATA[<p>Java Hashset code example :</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.*;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> {

    <span class="hljs-comment">// Main method to start the program</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-keyword">try</span> {
            <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);
            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> readIntegerInput(s); <span class="hljs-comment">// Read the number of pairs</span>
            String[] pair_left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[t]; <span class="hljs-comment">// Array to store left elements of pairs</span>
            String[] pair_right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[t]; <span class="hljs-comment">// Array to store right elements of pairs</span>

            readPairs(s, t, pair_left, pair_right); <span class="hljs-comment">// Read pairs from the input</span>
            processPairs(t, pair_left, pair_right); <span class="hljs-comment">// Process pairs and add them to a HashSet</span>
        } <span class="hljs-keyword">catch</span> (Exception e) {
            System.out.println(<span class="hljs-string">"An error occurred: "</span> + e.getMessage());
        }
    }

    <span class="hljs-comment">// Method to read an integer input from the scanner</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readIntegerInput</span><span class="hljs-params">(Scanner s)</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> s.nextInt();
        <span class="hljs-keyword">return</span> t;
    }

    <span class="hljs-comment">// Method to read pairs from the scanner</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readPairs</span><span class="hljs-params">(Scanner s, <span class="hljs-type">int</span> t, String[] pair_left, String[] pair_right)</span> {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t; i++) {
            pair_left[i] = s.next();
            pair_right[i] = s.next();
        }
    }

    <span class="hljs-comment">// Method to process pairs and add them to a HashSet</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processPairs</span><span class="hljs-params">(<span class="hljs-type">int</span> t, String[] pair_left, String[] pair_right)</span> {
        HashSet&lt;String&gt; pairs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(t);

        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t; i++) {
            pairs.add(<span class="hljs-string">"("</span> + pair_left[i] + <span class="hljs-string">", "</span> + pair_right[i] + <span class="hljs-string">")"</span>);
            System.out.println(pairs.size());
        }
    }
}</code></pre></div>
<p><strong>Sample Input</strong></p>
<pre style="background:linear-gradient(to right, #F3F7EC, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
5
john tom
john mary
john tom
mary anna
mary anna
</pre>
<p><strong>Sample Output</strong></p>
<pre style="background:linear-gradient(to right, #FFE6E6, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
1
2
2
3
3
</pre>
<h2 id="elucidation">Elucidation</h2>
<p>Here is a detailed explanation of the provided Java code above :</p>
<h3 id="code-explanation">Code Explanation:</h3>
<ol>
<li>
<p><strong>Main Method</strong>:</p>
<ul>
<li>The <code>main</code> method is the entry point of the program.</li>
<li>It initializes a Scanner <code>s</code> to read input from the console.</li>
<li>It reads an integer <code>t</code> representing the number of pairs from the input.</li>
<li>Two arrays, <code>pair_left</code> and <code>pair_right</code>, are initialized to store the left and right elements of the pairs.</li>
</ul>
</li>
<li>
<p><strong>Reading Pairs</strong>:</p>
<ul>
<li>The <code>readPairs</code> method reads the pairs from the input by iterating <code>t</code> times.</li>
<li>For each iteration, it reads two strings representing the left and right elements of a pair and stores them in the respective arrays.</li>
</ul>
</li>
<li>
<p><strong>Processing Pairs</strong>:</p>
<ul>
<li>The <code>processPairs</code> method creates a HashSet <code>pairs</code> to store unique pair combinations.</li>
<li>It iterates over the pairs and adds each pair in the format “(left, right)” to the HashSet.</li>
<li>The size of the HashSet after adding each pair is printed, indicating the number of unique pairs encountered so far.</li>
</ul>
</li>
<li>
<p><strong>Error Handling</strong>:</p>
<ul>
<li>The code is wrapped in a try-catch block to handle any exceptions that may occur during input reading or processing.</li>
<li>If an exception occurs, an error message is displayed indicating the type of error.</li>
</ul>
</li>
<li>
<p><strong>Overall Functionality</strong>:</p>
<ul>
<li>The code reads pairs of strings from the input, creates unique pair combinations, and counts the number of unique pairs encountered.</li>
<li>It utilizes arrays to store pair elements and a HashSet to ensure uniqueness of pairs.</li>
</ul>
</li>
<li>
<p><strong>Output</strong>:</p>
<ul>
<li>The output of the program displays the number of unique pairs encountered after processing each pair.</li>
</ul>
</li>
</ol>
<p>This code efficiently processes pairs of strings, creates unique pair combinations, and provides real-time feedback on the number of unique pairs encountered. It is well-structured and handles input processing effectively.</p>
<hr />
<h2 id="the-hashset-class">The <code>Hashset</code> Class</h2>
<h3 id="hashset-class-in-java">HashSet Class in Java:</h3>
<ol>
<li>
<p><strong>Definition</strong>:</p>
<ul>
<li><code>HashSet</code> is a class in Java that implements the <code>Set</code> interface and represents a collection of unique elements.</li>
<li>It uses a hash table to store elements, providing constant-time performance for basic operations like add, remove, and contains.</li>
<li>HashSet does not maintain the insertion order of elements.</li>
</ul>
</li>
<li>
<p><strong>Key Features</strong>:</p>
<ul>
<li><strong>Unique Elements</strong>: HashSet does not allow duplicate elements.</li>
<li><strong>Fast Operations</strong>: Provides constant-time performance for basic operations like add, remove, and contains.</li>
<li><strong>Hash Table</strong>: Uses hashing to store elements, ensuring quick access and retrieval.</li>
<li><strong>No Order</strong>: Elements are not stored in any particular order.</li>
</ul>
</li>
<li>
<p><strong>Common Methods</strong>:</p>
<ul>
<li><code>add(element)</code>: Adds an element to the HashSet if it is not already present.</li>
<li><code>remove(element)</code>: Removes the specified element from the HashSet.</li>
<li><code>contains(element)</code>: Checks if the HashSet contains a specific element.</li>
<li><code>size()</code>: Returns the number of elements in the HashSet.</li>
<li><code>clear()</code>: Removes all elements from the HashSet.</li>
</ul>
</li>
<li>
<p><strong>Code Example</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.HashSet;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSetExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        HashSet&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();

        <span class="hljs-comment">// Adding elements to the HashSet</span>
        set.add(<span class="hljs-string">"Apple"</span>);
        set.add(<span class="hljs-string">"Banana"</span>);
        set.add(<span class="hljs-string">"Orange"</span>);
        set.add(<span class="hljs-string">"Apple"</span>); <span class="hljs-comment">// Duplicate element</span>

        <span class="hljs-comment">// Checking if an element exists in the HashSet</span>
        System.out.println(<span class="hljs-string">"Contains 'Banana': "</span> + set.contains(<span class="hljs-string">"Banana"</span>));

        <span class="hljs-comment">// Removing an element from the HashSet</span>
        set.remove(<span class="hljs-string">"Orange"</span>);

        <span class="hljs-comment">// Displaying the elements in the HashSet</span>
        System.out.println(<span class="hljs-string">"Elements in HashSet: "</span> + set);
    }
}</code></pre></div>
</li>
<li>
<p><strong>Output</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-built_in">Contains</span> <span class="hljs-string">'Banana'</span>: <span class="hljs-literal">true</span>
Elements in HashSet: [Apple, Banana]</code></pre></div>
</li>
<li>
<p><strong>Explanation</strong>:</p>
<ul>
<li>In the code example, we create a HashSet of strings and add elements “Apple”, “Banana”, and “Orange” to it.</li>
<li>Since HashSet does not allow duplicates, the second addition of “Apple” is ignored.</li>
<li>We check if the HashSet contains the element “Banana” using <code>contains</code> method.</li>
<li>We remove the element “Orange” from the HashSet using <code>remove</code> method.</li>
<li>Finally, we display the elements in the HashSet, showing that “Orange” is removed and duplicates are not allowed.</li>
</ul>
</li>
</ol>
<p>This example demonstrates the basic usage of the HashSet class in Java for storing unique elements and performing set operations. The output showcases the results of operations performed on the HashSet.</p>
<hr />
<h2 id="the-set-interface">The <code>Set</code> Interface</h2>
<h3 id="set-interface-in-java">Set Interface in Java:</h3>
<ol>
<li>
<p><strong>Definition</strong>:</p>
<ul>
<li>The <code>Set</code> interface in Java is a part of the Java Collections Framework and represents a collection of unique elements.</li>
<li>It does not allow duplicate elements and does not guarantee the order of elements.</li>
<li>Implementations of the Set interface include HashSet, TreeSet, and LinkedHashSet.</li>
</ul>
</li>
<li>
<p><strong>Key Features</strong>:</p>
<ul>
<li><strong>Unique Elements</strong>: Set does not allow duplicate elements.</li>
<li><strong>Fast Operations</strong>: Provides constant-time performance for basic operations like add, remove, and contains.</li>
<li><strong>No Order</strong>: Elements are not stored in any particular order.</li>
<li><strong>No Index</strong>: Set does not support indexing like lists.</li>
</ul>
</li>
<li>
<p><strong>Common Methods</strong>:</p>
<ul>
<li><code>add(element)</code>: Adds an element to the Set if it is not already present.</li>
<li><code>remove(element)</code>: Removes the specified element from the Set.</li>
<li><code>contains(element)</code>: Checks if the Set contains a specific element.</li>
<li><code>size()</code>: Returns the number of elements in the Set.</li>
<li><code>clear()</code>: Removes all elements from the Set.</li>
</ul>
</li>
<li>
<p><strong>Code Example</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.HashSet;
<span class="hljs-keyword">import</span> java.util.Set;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetInterfaceExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();

        <span class="hljs-comment">// Adding elements to the Set</span>
        set.add(<span class="hljs-string">"Apple"</span>);
        set.add(<span class="hljs-string">"Banana"</span>);
        set.add(<span class="hljs-string">"Orange"</span>);
        set.add(<span class="hljs-string">"Apple"</span>); <span class="hljs-comment">// Duplicate element</span>

        <span class="hljs-comment">// Checking if an element exists in the Set</span>
        System.out.println(<span class="hljs-string">"Contains 'Banana': "</span> + set.contains(<span class="hljs-string">"Banana"</span>));

        <span class="hljs-comment">// Removing an element from the Set</span>
        set.remove(<span class="hljs-string">"Orange"</span>);

        <span class="hljs-comment">// Displaying the elements in the Set</span>
        System.out.println(<span class="hljs-string">"Elements in Set: "</span> + set);
    }
}</code></pre></div>
</li>
<li>
<p><strong>Output</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-keyword">Contains</span> <span class="hljs-string">'Banana'</span>: <span class="hljs-literal">true</span>
Elements <span class="hljs-keyword">in</span> <span class="hljs-keyword">Set</span>: [Apple, Banana]</code></pre></div>
</li>
<li>
<p><strong>Explanation</strong>:</p>
<ul>
<li>In the code example, we create a HashSet that implements the Set interface to store unique elements.</li>
<li>We add elements “Apple”, “Banana”, and “Orange” to the Set.</li>
<li>Since Set does not allow duplicates, the second addition of “Apple” is ignored.</li>
<li>We check if the Set contains the element “Banana” using <code>contains</code> method.</li>
<li>We remove the element “Orange” from the Set using <code>remove</code> method.</li>
<li>Finally, we display the elements in the Set, showing that “Orange” is removed and duplicates are not allowed.</li>
</ul>
</li>
</ol>
<p>This example demonstrates the basic usage of the Set interface in Java for storing unique elements and performing set operations. The output showcases the results of operations performed on the Set.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Stack in Java]]></title>
            <guid>39c88a1c2576410387760aec1923cc96</guid>
            <pubDate>Mon, 01 Jul 2024 01:11:06 GMT</pubDate>
            <content:encoded><![CDATA[<p>Java Stack code example :</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.*;
<span class="hljs-keyword">import</span> java.text.*;
<span class="hljs-keyword">import</span> java.math.*;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> {

    <span class="hljs-comment">// Main method to start the program</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-keyword">try</span> {
            <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);
            checkBalancedParentheses(sc);
        } <span class="hljs-keyword">catch</span> (Exception e) {
            System.out.println(<span class="hljs-string">"An error occurred: "</span> + e.getMessage());
        }
    }

    <span class="hljs-comment">// Method to check if the parentheses in a string are balanced</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(String s)</span> {
        Stack&lt;Character&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Character&gt;();
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); ++i) {
            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> s.charAt(i);
            <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'('</span> || ch == <span class="hljs-string">'{'</span> || ch == <span class="hljs-string">'['</span>) {
                stack.push(ch);
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">')'</span> || ch == <span class="hljs-string">'}'</span> || ch == <span class="hljs-string">']'</span>) {
                <span class="hljs-keyword">if</span> (stack.isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
                <span class="hljs-type">char</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> stack.pop();
                <span class="hljs-keyword">if</span> ((ch == <span class="hljs-string">')'</span> &amp;&amp; top != <span class="hljs-string">'('</span>) || (ch == <span class="hljs-string">'}'</span> &amp;&amp; top != <span class="hljs-string">'{'</span>) || (ch == <span class="hljs-string">']'</span> &amp;&amp; top != <span class="hljs-string">'['</span>)) {
                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
                }
            }
        }
        <span class="hljs-keyword">return</span> stack.isEmpty();
    }

    <span class="hljs-comment">// Method to check balanced parentheses in each input line</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkBalancedParentheses</span><span class="hljs-params">(Scanner sc)</span> {
        <span class="hljs-keyword">while</span> (sc.hasNextLine()) {
            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> sc.nextLine();
            <span class="hljs-keyword">if</span> (isBalanced(line)) {
                System.out.println(<span class="hljs-string">"true"</span>);
            } <span class="hljs-keyword">else</span> {
                System.out.println(<span class="hljs-string">"false"</span>);
            }
        }
    }
}</code></pre></div>
<p><strong>Sample Input</strong></p>
<pre style="background:linear-gradient(to right, #F3F7EC, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
{}()
({()})
{}(
[]
</pre>
<p><strong>Sample Output</strong></p>
<pre style="background:linear-gradient(to right, #FFE6E6, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
true
true
false
true
</pre>
<h2 id="elucidation">Elucidation</h2>
<p>Here is a detailed explanation of the provided Java code above :</p>
<h3 id="code-explanation">Code Explanation:</h3>
<ol>
<li>
<p><strong>Main Method</strong>:</p>
<ul>
<li>The <code>main</code> method is the entry point of the program.</li>
<li>It initializes a Scanner <code>sc</code> to read input from the console.</li>
<li>It then calls the <code>checkBalancedParentheses</code> method to check for balanced parentheses in each input line.</li>
<li>The method is wrapped in a try-catch block to handle any exceptions that may occur during runtime.</li>
</ul>
</li>
<li>
<p><strong>isBalanced Method</strong>:</p>
<ul>
<li>The <code>isBalanced</code> method checks if the parentheses in a given string are balanced.</li>
<li>It uses a Stack to keep track of opening parentheses encountered.</li>
<li>It iterates through each character in the string and pushes opening parentheses onto the stack.</li>
<li>If a closing parenthesis is encountered, it checks if the corresponding opening parenthesis matches the top of the stack.</li>
<li>If the parentheses match, it continues; otherwise, it returns <code>false</code>.</li>
<li>Finally, it checks if the stack is empty after processing all characters to ensure all parentheses are balanced.</li>
</ul>
</li>
<li>
<p><strong>checkBalancedParentheses Method</strong>:</p>
<ul>
<li>The <code>checkBalancedParentheses</code> method iterates through each input line using the provided Scanner.</li>
<li>For each line, it calls the <code>isBalanced</code> method to check if the parentheses are balanced.</li>
<li>If the parentheses are balanced, it prints “true”; otherwise, it prints “false”.</li>
</ul>
</li>
<li>
<p><strong>Overall Functionality</strong>:</p>
<ul>
<li>The code efficiently checks for balanced parentheses in each input line.</li>
<li>It uses a stack to keep track of opening parentheses and ensures that closing parentheses match the corresponding opening parentheses.</li>
<li>The program outputs “true” if the parentheses are balanced and “false” if they are not.</li>
</ul>
</li>
<li>
<p><strong>Exception Handling</strong>:</p>
<ul>
<li>The code includes exception handling to catch and display any errors that occur during input reading or processing.</li>
</ul>
</li>
</ol>
<p>This code demonstrates a simple and effective approach to checking for balanced parentheses using a stack data structure. It is well-structured, modular, and handles input processing and validation effectively.</p>
<hr />
<h2 id="the-stack-class">The <code>Stack</code> Class</h2>
<h3 id="stack-class-in-java">Stack Class in Java:</h3>
<ol>
<li>
<p><strong>Definition</strong>:</p>
<ul>
<li>The <code>Stack</code> class in Java represents a last-in, first-out (LIFO) stack of objects.</li>
<li>It extends the <code>Vector</code> class with five operations that allow a vector to be treated as a stack.</li>
<li>It is part of the Java Collections Framework and is used to store and manipulate elements in a stack data structure.</li>
</ul>
</li>
<li>
<p><strong>Key Features</strong>:</p>
<ul>
<li><strong>Push Operation</strong>: Adds an element to the top of the stack.</li>
<li><strong>Pop Operation</strong>: Removes and returns the element at the top of the stack.</li>
<li><strong>Peek Operation</strong>: Returns the element at the top of the stack without removing it.</li>
<li><strong>Empty Stack</strong>: Indicates if the stack is empty or not.</li>
<li><strong>Search Operation</strong>: Searches for an element in the stack and returns its position.</li>
</ul>
</li>
<li>
<p><strong>Common Methods</strong>:</p>
<ul>
<li><code>push(element)</code>: Adds an element to the top of the stack.</li>
<li><code>pop()</code>: Removes and returns the element at the top of the stack.</li>
<li><code>peek()</code>: Returns the element at the top of the stack without removing it.</li>
<li><code>empty()</code>: Checks if the stack is empty.</li>
<li><code>search(element)</code>: Searches for an element in the stack.</li>
</ul>
</li>
<li>
<p><strong>Code Example</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.Stack;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StackExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();

        <span class="hljs-comment">// Push elements onto the stack</span>
        stack.push(<span class="hljs-number">10</span>);
        stack.push(<span class="hljs-number">20</span>);
        stack.push(<span class="hljs-number">30</span>);

        <span class="hljs-comment">// Pop element from the stack</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">poppedElement</span> <span class="hljs-operator">=</span> stack.pop();
        System.out.println(<span class="hljs-string">"Popped Element: "</span> + poppedElement);

        <span class="hljs-comment">// Peek at the top element</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">topElement</span> <span class="hljs-operator">=</span> stack.peek();
        System.out.println(<span class="hljs-string">"Top Element: "</span> + topElement);

        <span class="hljs-comment">// Check if the stack is empty</span>
        <span class="hljs-type">boolean</span> <span class="hljs-variable">isEmpty</span> <span class="hljs-operator">=</span> stack.empty();
        System.out.println(<span class="hljs-string">"Is Stack Empty: "</span> + isEmpty);
    }
}</code></pre></div>
</li>
<li>
<p><strong>Output</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-variable">Popped</span> <span class="hljs-built_in">Element</span><span class="hljs-operator">:</span> <span class="hljs-number">30</span>
<span class="hljs-built_in">Top</span> <span class="hljs-built_in">Element</span><span class="hljs-operator">:</span> <span class="hljs-number">20</span>
<span class="hljs-variable">Is</span> <span class="hljs-built_in">Stack</span> <span class="hljs-built_in">Empty</span><span class="hljs-operator">:</span> <span class="hljs-variable">false</span></code></pre></div>
</li>
<li>
<p><strong>Explanation</strong>:</p>
<ul>
<li>In the code example, we create a <code>Stack</code> of integers and perform stack operations.</li>
<li>We push elements 10, 20, and 30 onto the stack using the <code>push</code> method.</li>
<li>We then pop an element from the stack using the <code>pop</code> method and print the popped element.</li>
<li>We peek at the top element of the stack without removing it using the <code>peek</code> method and print the top element.</li>
<li>We check if the stack is empty using the <code>empty</code> method and print whether the stack is empty or not.</li>
</ul>
</li>
</ol>
<p>This example demonstrates the basic usage of the <code>Stack</code> class in Java for implementing a stack data structure. The output shows the results of stack operations performed in the code.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Map in Java]]></title>
            <guid>f5a124b3e56a42a085c1a6deac5468f0</guid>
            <pubDate>Mon, 01 Jul 2024 00:45:46 GMT</pubDate>
            <content:encoded><![CDATA[<p>Java Map code example :</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.*;
<span class="hljs-keyword">import</span> java.util.Map;
<span class="hljs-keyword">import</span> java.util.HashMap;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> {

    <span class="hljs-comment">// Main method to start the program</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">// Initialize scanner to read input</span>
            <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);
            <span class="hljs-comment">// Read the number of entries in the phone book</span>
            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> readIntegerInput(scanner);
            <span class="hljs-comment">// Create a phone book with user inputs</span>
            Map&lt;String, String&gt; map = createPhoneBook(scanner, n);
            <span class="hljs-comment">// Search for entries in the phone book based on queries</span>
            searchPhoneBookEntries(scanner, map);
        } <span class="hljs-keyword">catch</span> (Exception e) {
            System.out.println(<span class="hljs-string">"An error occurred: "</span> + e.getMessage());
        }
    }

    <span class="hljs-comment">// Method to read an integer input from the scanner</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readIntegerInput</span><span class="hljs-params">(Scanner scanner)</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
        <span class="hljs-keyword">try</span> {
            n = Integer.parseInt(scanner.nextLine());
        } <span class="hljs-keyword">catch</span> (NumberFormatException e) {
            System.out.println(<span class="hljs-string">"Invalid input. Please enter a valid integer."</span>);
        }
        <span class="hljs-keyword">return</span> n;
    }

    <span class="hljs-comment">// Method to create a phone book using user inputs</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title function_">createPhoneBook</span><span class="hljs-params">(Scanner scanner, <span class="hljs-type">int</span> n)</span> {
        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) {
            <span class="hljs-comment">// Read name and phone number for each entry</span>
            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.nextLine();
            <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> scanner.nextLine();
            <span class="hljs-comment">// Add entry to the phone book</span>
            map.put(name, phone);
        }
        <span class="hljs-keyword">return</span> map;
    }

    <span class="hljs-comment">// Method to search for phone book entries based on user queries</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">searchPhoneBookEntries</span><span class="hljs-params">(Scanner scanner, Map&lt;String, String&gt; map)</span> {
        <span class="hljs-keyword">while</span> (scanner.hasNextLine()) {
            <span class="hljs-comment">// Read query from user</span>
            <span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> scanner.nextLine();
            <span class="hljs-comment">// Check if query exists in the phone book</span>
            <span class="hljs-keyword">if</span> (map.containsKey(query)) {
                <span class="hljs-comment">// Print the phone number if query found</span>
                System.out.println(query + <span class="hljs-string">"="</span> + map.get(query));
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-comment">// Print "Not found" if query not found</span>
                System.out.println(<span class="hljs-string">"Not found"</span>);
            }
        }
    }
}</code></pre></div>
<p><strong>Sample Input</strong></p>
<pre style="background:linear-gradient(to right, #F3F7EC, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
3
uncle sam
99912222
tom
11122222
harry
12299933
uncle sam
uncle tom
harry
</pre>
<p><strong>Sample Output</strong></p>
<pre style="background:linear-gradient(to right, #FFE6E6, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
uncle sam=99912222
Not found
harry=12299933
</pre>
<h2 id="elucidation">Elucidation</h2>
<p>Here is a detailed explanation of the provided Java code above :</p>
<ol>
<li>
<p><strong>Imports and Class Declaration</strong>:</p>
<ul>
<li>The code begins with importing necessary Java libraries, including <code>java.util.*</code> for utility classes like Scanner and HashMap.</li>
<li>It defines a public class named <code>Main</code>, which serves as the main entry point for the program.</li>
</ul>
</li>
<li>
<p><strong>Main Method</strong>:</p>
<ul>
<li>The <code>main</code> method is the starting point of the program’s execution.</li>
<li>It is wrapped in a try-catch block to handle any exceptions that may occur during runtime.</li>
<li>Inside the <code>main</code> method, the following steps are performed:
<ul>
<li>A Scanner object is created to read input from the console.</li>
<li>The number of entries in the phone book (<code>n</code>) is obtained by calling the <code>readIntegerInput</code> method.</li>
<li>A HashMap named <code>map</code> is created to store the name-phone number entries in the phone book.</li>
<li>The phone book entries are populated by calling the <code>createPhoneBook</code> method.</li>
<li>The phone book entries are searched based on user queries by calling the <code>searchPhoneBookEntries</code> method.</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Read Integer Input Method</strong>:</p>
<ul>
<li>The <code>readIntegerInput</code> method reads an integer input from the Scanner object passed as a parameter.</li>
<li>It attempts to parse the input as an integer using <code>Integer.parseInt</code>.</li>
<li>If the input is not a valid integer, a NumberFormatException is caught and an error message is displayed.</li>
</ul>
</li>
<li>
<p><strong>Create Phone Book Method</strong>:</p>
<ul>
<li>The <code>createPhoneBook</code> method populates the phone book entries in a HashMap.</li>
<li>It takes the Scanner object and the number of entries (<code>n</code>) as parameters.</li>
<li>For each entry, it reads the name and phone number from the input and adds them to the HashMap.</li>
</ul>
</li>
<li>
<p><strong>Search Phone Book Entries Method</strong>:</p>
<ul>
<li>The <code>searchPhoneBookEntries</code> method handles the searching of phone book entries based on user queries.</li>
<li>It takes the Scanner object and the HashMap containing phone book entries as parameters.</li>
<li>It continuously reads user queries and checks if the query exists in the phone book.</li>
<li>If the query is found, it prints the corresponding phone number; otherwise, it prints “Not found”.</li>
</ul>
</li>
<li>
<p><strong>Exception Handling</strong>:</p>
<ul>
<li>The try-catch block in the main method catches any exceptions that may occur during the program’s execution.</li>
<li>If an exception is caught, an error message is displayed, including the exception message.</li>
</ul>
</li>
</ol>
<p>Overall, this code structure improves readability, maintainability, and error handling by breaking down the functionality into smaller, more manageable methods with appropriate comments to explain each section’s purpose.</p>
<hr />
<h2 id="hashmap-class"><code>HashMap</code> Class</h2>
<h3 id="hashmap-class-in-java">HashMap Class in Java:</h3>
<ol>
<li>
<p><strong>Definition</strong>:</p>
<ul>
<li><code>HashMap</code> is a class in Java that implements the <code>Map</code> interface to store key-value pairs.</li>
<li>It allows null keys and values, and it does not maintain the order of elements.</li>
</ul>
</li>
<li>
<p><strong>Key Features</strong>:</p>
<ul>
<li><strong>Fast Lookup</strong>: HashMap provides constant-time performance for basic operations like get and put.</li>
<li><strong>Key-Value Pairs</strong>: Each entry in a HashMap is a key-value pair.</li>
<li><strong>Resizable</strong>: HashMap automatically resizes itself when the number of elements exceeds a certain threshold.</li>
<li><strong>Thread-Safe</strong>: HashMap is not synchronized by default. If thread safety is required, you can use <code>Collections.synchronizedMap()</code>.</li>
</ul>
</li>
<li>
<p><strong>Common Methods</strong>:</p>
<ul>
<li><code>put(key, value)</code>: Inserts a key-value pair into the HashMap.</li>
<li><code>get(key)</code>: Retrieves the value associated with the specified key.</li>
<li><code>containsKey(key)</code>: Checks if the HashMap contains a specific key.</li>
<li><code>keySet()</code>: Returns a Set containing all the keys in the HashMap.</li>
<li><code>values()</code>: Returns a Collection containing all the values in the HashMap.</li>
<li><code>remove(key)</code>: Removes the key-value pair associated with the specified key.</li>
</ul>
</li>
<li>
<p><strong>Code Example</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.HashMap;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMapExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-comment">// Create a new HashMap</span>
        HashMap&lt;String, Integer&gt; scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();

        <span class="hljs-comment">// Add key-value pairs to the HashMap</span>
        scores.put(<span class="hljs-string">"Alice"</span>, <span class="hljs-number">95</span>);
        scores.put(<span class="hljs-string">"Bob"</span>, <span class="hljs-number">85</span>);
        scores.put(<span class="hljs-string">"Charlie"</span>, <span class="hljs-number">90</span>);

        <span class="hljs-comment">// Retrieve and print the value for a specific key</span>
        System.out.println(<span class="hljs-string">"Bob's score: "</span> + scores.get(<span class="hljs-string">"Bob"</span>));

        <span class="hljs-comment">// Check if a key exists in the HashMap</span>
        <span class="hljs-keyword">if</span> (scores.containsKey(<span class="hljs-string">"Alice"</span>)) {
            System.out.println(<span class="hljs-string">"Alice's score is present."</span>);
        }

        <span class="hljs-comment">// Remove a key-value pair from the HashMap</span>
        scores.remove(<span class="hljs-string">"Charlie"</span>);

        <span class="hljs-comment">// Iterate over the keys and values in the HashMap</span>
        <span class="hljs-keyword">for</span> (String name : scores.keySet()) {
            System.out.println(name + <span class="hljs-string">"'s score: "</span> + scores.get(name));
        }
    }
}</code></pre></div>
</li>
<li>
<p><strong>Output</strong>:</p>
<div><pre class="hljs"><code>Bob<span class="hljs-string">'s score: 85
Alice'</span>s score <span class="hljs-keyword">is</span> present.
Alic<span class="hljs-string">e's score: 95
Bob'</span>s score: <span class="hljs-number">85</span></code></pre></div>
</li>
<li>
<p><strong>Explanation</strong>:</p>
<ul>
<li>In the code example, we create a HashMap named <code>scores</code> that stores String keys and Integer values.</li>
<li>We add key-value pairs representing names and scores to the HashMap using the <code>put</code> method.</li>
<li>We retrieve and print Bob’s score using the <code>get</code> method.</li>
<li>We check if Alice’s score is present in the HashMap using <code>containsKey</code>.</li>
<li>We remove Charlie’s score from the HashMap using <code>remove</code>.</li>
<li>Finally, we iterate over the keys in the HashMap using <code>keySet</code> and print each name along with their score.</li>
</ul>
</li>
</ol>
<p>This example demonstrates the basic usage of the HashMap class in Java for storing and manipulating key-value pairs. The output shows the retrieved values and messages based on the operations performed on the HashMap.</p>
<hr />
<h2 id="map-interface"><code>Map</code> Interface</h2>
<h3 id="map-interface-in-java">Map Interface in Java:</h3>
<ol>
<li>
<p><strong>Definition</strong>:</p>
<ul>
<li>The <code>Map</code> interface in Java represents a collection of key-value pairs.</li>
<li>It does not allow duplicate keys and each key can map to at most one value.</li>
<li><code>Map</code> is implemented by classes like <code>HashMap</code>, <code>TreeMap</code>, and <code>LinkedHashMap</code>.</li>
</ul>
</li>
<li>
<p><strong>Key Features</strong>:</p>
<ul>
<li><strong>Key-Value Pairs</strong>: Entries in a Map are stored as key-value pairs.</li>
<li><strong>Methods</strong>: Provides methods for adding, removing, and retrieving elements based on keys.</li>
<li><strong>Iterability</strong>: Allows iteration over keys, values, or entries.</li>
<li><strong>No Duplicate Keys</strong>: Ensures that each key is unique within the Map.</li>
</ul>
</li>
<li>
<p><strong>Common Methods</strong>:</p>
<ul>
<li><code>put(key, value)</code>: Inserts a key-value pair into the Map.</li>
<li><code>get(key)</code>: Retrieves the value associated with the specified key.</li>
<li><code>containsKey(key)</code>: Checks if the Map contains a specific key.</li>
<li><code>keySet()</code>: Returns a Set containing all the keys in the Map.</li>
<li><code>values()</code>: Returns a Collection containing all the values in the Map.</li>
<li><code>entrySet()</code>: Returns a Set containing all key-value mappings in the Map.</li>
</ul>
</li>
<li>
<p><strong>Code Example</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.HashMap;
<span class="hljs-keyword">import</span> java.util.Map;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapInterfaceExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-comment">// Create a new HashMap implementing the Map interface</span>
        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();

        <span class="hljs-comment">// Add key-value pairs to the Map</span>
        map.put(<span class="hljs-string">"A"</span>, <span class="hljs-number">1</span>);
        map.put(<span class="hljs-string">"B"</span>, <span class="hljs-number">2</span>);
        map.put(<span class="hljs-string">"C"</span>, <span class="hljs-number">3</span>);

        <span class="hljs-comment">// Retrieve and print the value for a specific key</span>
        System.out.println(<span class="hljs-string">"Value for key 'B': "</span> + map.get(<span class="hljs-string">"B"</span>));

        <span class="hljs-comment">// Check if a key exists in the Map</span>
        <span class="hljs-keyword">if</span> (map.containsKey(<span class="hljs-string">"A"</span>)) {
            System.out.println(<span class="hljs-string">"Key 'A' is present."</span>);
        }

        <span class="hljs-comment">// Iterate over the entries in the Map</span>
        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) {
            System.out.println(<span class="hljs-string">"Key: "</span> + entry.getKey() + <span class="hljs-string">", Value: "</span> + entry.getValue());
        }
    }
}</code></pre></div>
</li>
<li>
<p><strong>Output</strong>:</p>
<div><pre class="hljs"><code><span class="hljs-built_in">Value</span> <span class="hljs-variable">for</span> <span class="hljs-variable">key</span> <span class="hljs-operator">'</span><span class="hljs-variable">B</span><span class="hljs-operator">':</span> <span class="hljs-number">2</span>
<span class="hljs-built_in">Key</span> <span class="hljs-operator">'</span><span class="hljs-variable">A</span><span class="hljs-operator">'</span> <span class="hljs-variable">is</span> <span class="hljs-variable">present</span><span class="hljs-operator">.</span>
<span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-variable">A</span><span class="hljs-operator">,</span> <span class="hljs-built_in">Value</span><span class="hljs-operator">:</span> <span class="hljs-number">1</span>
<span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-variable">B</span><span class="hljs-operator">,</span> <span class="hljs-built_in">Value</span><span class="hljs-operator">:</span> <span class="hljs-number">2</span>
<span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-built_in">C</span><span class="hljs-operator">,</span> <span class="hljs-built_in">Value</span><span class="hljs-operator">:</span> <span class="hljs-number">3</span></code></pre></div>
</li>
<li>
<p><strong>Explanation</strong>:</p>
<ul>
<li>In the code example, we create a HashMap that implements the Map interface with String keys and Integer values.</li>
<li>We add key-value pairs to the Map using the <code>put</code> method.</li>
<li>We retrieve and print the value associated with the key “B” using the <code>get</code> method.</li>
<li>We check if the key “A” is present in the Map using <code>containsKey</code>.</li>
<li>We iterate over the entries in the Map using <code>entrySet</code> and print each key-value pair.</li>
</ul>
</li>
</ol>
<p>This example demonstrates the usage of the Map interface in Java for storing and manipulating key-value pairs. The output shows the retrieved values and messages based on the operations performed on the Map.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[List in Java]]></title>
            <guid>e29c7a07b06b4968801636957f358211</guid>
            <pubDate>Sun, 30 Jun 2024 22:36:31 GMT</pubDate>
            <content:encoded><![CDATA[<p>Java List code example :</p>
<div><pre class="hljs"><code>import java.io.*;
import java.util.*;

public <span class="hljs-keyword">class</span> Main {

    public static void main(String<span class="hljs-literal">[]</span> args) {
        <span class="hljs-comment">// Create a Scanner object to read input from the console</span>
        final Scanner <span class="hljs-keyword">in</span> = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(System.<span class="hljs-params">in</span>)</span>;
        
        <span class="hljs-comment">// Read the size of the list from input</span>
        <span class="hljs-built_in">int</span> size = read<span class="hljs-constructor">Size(<span class="hljs-params">in</span>)</span>;
        
        <span class="hljs-comment">// Read the initial list of integers based on the size</span>
        List&lt;Integer&gt; <span class="hljs-built_in">list</span> = read<span class="hljs-constructor">List(<span class="hljs-params">in</span>, <span class="hljs-params">size</span>)</span>;
        
        <span class="hljs-comment">// Read the number of commands to be processed</span>
        <span class="hljs-built_in">int</span> commandCount = read<span class="hljs-constructor">CommandCount(<span class="hljs-params">in</span>)</span>;
        
        <span class="hljs-comment">// Process the commands and update the list accordingly</span>
        process<span class="hljs-constructor">Commands(<span class="hljs-params">in</span>, <span class="hljs-params">list</span>, <span class="hljs-params">commandCount</span>)</span>;
        
        <span class="hljs-comment">// Print the final list of integers after processing commands</span>
        print<span class="hljs-constructor">List(<span class="hljs-params">list</span>)</span>;
    }

    <span class="hljs-comment">// Method to read the size of the list</span>
    <span class="hljs-keyword">private</span> static <span class="hljs-built_in">int</span> read<span class="hljs-constructor">Size(Scanner <span class="hljs-params">in</span>)</span> {
        return <span class="hljs-keyword">in</span>.next<span class="hljs-constructor">Int()</span>;
    }

    <span class="hljs-comment">// Method to read the initial list of integers</span>
    <span class="hljs-keyword">private</span> static List&lt;Integer&gt; read<span class="hljs-constructor">List(Scanner <span class="hljs-params">in</span>, <span class="hljs-params">int</span> <span class="hljs-params">size</span>)</span> {
        <span class="hljs-comment">// Create a LinkedList to store the initial list of integers</span>
        List&lt;Integer&gt; <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;<span class="hljs-literal">()</span>;
        
        <span class="hljs-comment">// Read integers from input and add them to the list</span>
        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) {
            <span class="hljs-built_in">list</span>.add(<span class="hljs-keyword">in</span>.next<span class="hljs-constructor">Int()</span>);
        }
        
        return <span class="hljs-built_in">list</span>;
    }

    <span class="hljs-comment">// Method to read the number of commands</span>
    <span class="hljs-keyword">private</span> static <span class="hljs-built_in">int</span> read<span class="hljs-constructor">CommandCount(Scanner <span class="hljs-params">in</span>)</span> {
        return <span class="hljs-keyword">in</span>.next<span class="hljs-constructor">Int()</span>;
    }

    <span class="hljs-comment">// Method to process the commands and update the list</span>
    <span class="hljs-keyword">private</span> static void process<span class="hljs-constructor">Commands(Scanner <span class="hljs-params">in</span>, List&lt;Integer&gt; <span class="hljs-params">list</span>, <span class="hljs-params">int</span> <span class="hljs-params">commandCount</span>)</span> {
        <span class="hljs-comment">// Iterate through each command and update the list accordingly</span>
        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; commandCount; i++) {
            <span class="hljs-keyword">in</span>.next<span class="hljs-constructor">Line()</span>;
            String command = <span class="hljs-keyword">in</span>.next<span class="hljs-constructor">Line()</span>;
            <span class="hljs-keyword">try</span> {
                <span class="hljs-keyword">if</span> (command.equals(<span class="hljs-string">"Insert"</span>)) {
                    <span class="hljs-comment">// If the command is "Insert", add a value at a specific index in the list</span>
                    <span class="hljs-built_in">int</span> index = <span class="hljs-keyword">in</span>.next<span class="hljs-constructor">Int()</span>;
                    <span class="hljs-built_in">int</span> value = <span class="hljs-keyword">in</span>.next<span class="hljs-constructor">Int()</span>;
                    <span class="hljs-built_in">list</span>.add(index, value);
                } <span class="hljs-keyword">else</span> {
                    <span class="hljs-comment">// If the command is not "Insert", remove the value at a specific index from the list</span>
                    <span class="hljs-built_in">int</span> index = <span class="hljs-keyword">in</span>.next<span class="hljs-constructor">Int()</span>;
                    <span class="hljs-built_in">list</span>.remove(index);
                }
            } catch (InputMismatchException e) {
                <span class="hljs-comment">// Handle InputMismatchException if the input format is invalid</span>
                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">"Invalid input format."</span>);
            }
        }
    }

    <span class="hljs-comment">// Method to print the final list of integers</span>
    <span class="hljs-keyword">private</span> static void print<span class="hljs-constructor">List(List&lt;Integer&gt; <span class="hljs-params">list</span>)</span> {
        <span class="hljs-comment">// Iterate through the list and print each integer value</span>
        <span class="hljs-built_in">int</span> count = <span class="hljs-number">0</span>;
        <span class="hljs-keyword">for</span> (Integer number : <span class="hljs-built_in">list</span>) {
            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.print(number);
            <span class="hljs-comment">// Print a space after each value except the last one</span>
            <span class="hljs-keyword">if</span> (count != <span class="hljs-built_in">list</span>.size<span class="hljs-literal">()</span> - <span class="hljs-number">1</span>) {
                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.print(<span class="hljs-string">" "</span>);
            }
            count++;
        }
    }
}</code></pre></div>
<p><strong>Sample Input</strong></p>
<pre style="background:linear-gradient(to right, #F3F7EC, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
5
12 0 1 78 12
2
Insert
5 23
Delete
0
</pre>
<p><strong>Sample Output</strong></p>
<pre style="background:linear-gradient(to right, #FFE6E6, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
0 1 78 12 23
</pre>
<h2 id="elucidation">Elucidation</h2>
<p>Here is a detailed explanation of the provided Java code above :</p>
<h3 id="main-class-and-main-method">Main Class and <code>main</code> Method:</h3>
<ul>
<li>The <code>Main</code> class serves as the main class for the program.</li>
<li>The <code>main</code> method is the entry point of the program where the execution begins.</li>
<li>It initializes a <code>Scanner</code> object <code>in</code> to read input from the console.</li>
<li>Reads the size of the list, the initial list of integers, the number of commands, processes the commands, and prints the final list.</li>
</ul>
<h3 id="readsize-method"><code>readSize</code> Method:</h3>
<ul>
<li>This method reads the size of the list from the input using the provided <code>Scanner</code> object.</li>
<li>It returns the integer value representing the size of the list.</li>
</ul>
<h3 id="readlist-method"><code>readList</code> Method:</h3>
<ul>
<li>This method reads the initial list of integers based on the specified size.</li>
<li>It creates a <code>LinkedList</code> to store the integers.</li>
<li>Iterates through the input and adds each integer to the list.</li>
<li>Returns the populated list of integers.</li>
</ul>
<h3 id="readcommandcount-method"><code>readCommandCount</code> Method:</h3>
<ul>
<li>This method reads the number of commands to be processed from the input using the provided <code>Scanner</code> object.</li>
<li>It returns the integer value representing the number of commands.</li>
</ul>
<h3 id="processcommands-method"><code>processCommands</code> Method:</h3>
<ul>
<li>This method processes the commands to update the list of integers.</li>
<li>It iterates through each command, reads the command type, index, and value (if applicable).</li>
<li>If the command is “Insert”, it adds the value at the specified index in the list.</li>
<li>If the command is not “Insert”, it removes the value at the specified index from the list.</li>
<li>It catches <code>InputMismatchException</code> to handle invalid input formats.</li>
</ul>
<h3 id="printlist-method"><code>printList</code> Method:</h3>
<ul>
<li>This method prints the final list of integers after processing the commands.</li>
<li>It iterates through the list and prints each integer value.</li>
<li>It adds a space after each value except the last one to format the output.</li>
</ul>
<h3 id="overall-functionality">Overall Functionality:</h3>
<ul>
<li>The program allows users to input the size of a list, the initial list of integers, and a series of commands to insert or remove elements from the list.</li>
<li>It processes the commands based on the input and prints the final list of integers after the modifications.</li>
</ul>
<h3 id="purpose">Purpose:</h3>
<ul>
<li>The code demonstrates how to read input, manipulate lists, process commands, and handle exceptions in Java.</li>
<li>It showcases the use of methods to organize code functionality and improve readability.</li>
<li>The program provides a simple example of list manipulation and command processing in a structured manner.</li>
</ul>
<hr />
<h2 id="the-linkedlist-class">The <code>LinkedList</code> Class</h2>
<p>In Java, <code>LinkedList</code> is a class that implements the <code>List</code> interface and represents a doubly-linked list. Here is a detailed explanation along with a code example:</p>
<h3 id="explanation">Explanation:</h3>
<ul>
<li><code>LinkedList</code> in Java is a class that provides a linked list data structure.</li>
<li>Each element in a <code>LinkedList</code> is stored as a node that contains the element value and references to the previous and next nodes.</li>
<li>It allows for fast insertion and deletion operations compared to arrays because it does not require shifting elements.</li>
<li><code>LinkedList</code> can contain duplicate elements and maintains the insertion order.</li>
<li>It provides methods to add, remove, retrieve elements, and perform various operations like adding elements at specific positions, removing elements by index, etc.</li>
<li><code>LinkedList</code> is not synchronized, so it is not thread-safe by default.</li>
</ul>
<h3 id="code-example">Code Example:</h3>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.LinkedList;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-comment">// Create a LinkedList of Strings</span>
        LinkedList&lt;String&gt; linkedList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();

        <span class="hljs-comment">// Adding elements to the LinkedList</span>
        linkedList.add(<span class="hljs-string">"Apple"</span>);
        linkedList.add(<span class="hljs-string">"Banana"</span>);
        linkedList.add(<span class="hljs-string">"Orange"</span>);

        <span class="hljs-comment">// Displaying the elements in the LinkedList</span>
        System.out.println(<span class="hljs-string">"LinkedList elements: "</span> + linkedList);

        <span class="hljs-comment">// Adding an element at a specific index</span>
        linkedList.add(<span class="hljs-number">1</span>, <span class="hljs-string">"Mango"</span>);

        <span class="hljs-comment">// Removing an element by index</span>
        linkedList.remove(<span class="hljs-number">2</span>);

        <span class="hljs-comment">// Displaying the modified LinkedList</span>
        System.out.println(<span class="hljs-string">"Modified LinkedList: "</span> + linkedList);

        <span class="hljs-comment">// Retrieving elements by index</span>
        System.out.println(<span class="hljs-string">"Element at index 0: "</span> + linkedList.get(<span class="hljs-number">0</span>));

        <span class="hljs-comment">// Checking if the LinkedList contains a specific element</span>
        System.out.println(<span class="hljs-string">"Contains 'Banana': "</span> + linkedList.contains(<span class="hljs-string">"Banana"</span>));

        <span class="hljs-comment">// Getting the size of the LinkedList</span>
        System.out.println(<span class="hljs-string">"Size of the LinkedList: "</span> + linkedList.size());

        <span class="hljs-comment">// Clearing the LinkedList</span>
        linkedList.clear();
        System.out.println(<span class="hljs-string">"LinkedList after clearing: "</span> + linkedList);
    }
}</code></pre></div>
<h3 id="output-explanation">Output Explanation:</h3>
<ul>
<li>The code creates a <code>LinkedList</code> of strings and adds elements “Apple”, “Banana”, and “Orange” to it.</li>
<li>It demonstrates adding an element “Mango” at index 1 and removing an element at index 2.</li>
<li>The code displays the modified <code>LinkedList</code>, retrieves an element at index 0, checks if it contains “Banana”, and gets the size of the <code>LinkedList</code>.</li>
<li>Finally, it clears the <code>LinkedList</code> and displays it after clearing.</li>
</ul>
<h3 id="summary">Summary:</h3>
<ul>
<li><code>LinkedList</code> in Java provides a flexible and efficient way to store and manipulate elements in a linked list data structure.</li>
<li>It offers various methods for adding, removing, and accessing elements, making it suitable for scenarios where frequent insertions and deletions are required.</li>
<li>Understanding and utilizing the capabilities of <code>LinkedList</code> can help in implementing data structures and algorithms efficiently in Java.</li>
</ul>
<hr />
<h2 id="list-interface"><code>List</code> Interface</h2>
<p>In Java, the <code>List</code> interface is a part of the Java Collections Framework and represents an ordered collection of elements that allows duplicate elements. Here is a detailed explanation along with a code example:</p>
<h3 id="explanation-2">Explanation:</h3>
<ul>
<li>The <code>List</code> interface in Java extends the <code>Collection</code> interface and represents an ordered collection of elements.</li>
<li>Elements in a <code>List</code> are stored based on their index position, allowing duplicate elements and maintaining the insertion order.</li>
<li>Common implementations of the <code>List</code> interface in Java include <code>ArrayList</code>, <code>LinkedList</code>, and <code>Vector</code>.</li>
<li>The <code>List</code> interface provides methods to add, remove, retrieve, and manipulate elements in the list.</li>
<li>It supports operations like adding elements at specific positions, removing elements by index, checking for element existence, getting sublist, and more.</li>
<li><code>List</code> allows for efficient random access to elements based on their index.</li>
</ul>
<h3 id="code-example-2">Code Example:</h3>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.ArrayList;
<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListInterfaceExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-comment">// Create a List of Strings using ArrayList</span>
        List&lt;String&gt; stringList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();

        <span class="hljs-comment">// Adding elements to the List</span>
        stringList.add(<span class="hljs-string">"Apple"</span>);
        stringList.add(<span class="hljs-string">"Banana"</span>);
        stringList.add(<span class="hljs-string">"Orange"</span>);

        <span class="hljs-comment">// Displaying the elements in the List</span>
        System.out.println(<span class="hljs-string">"List elements: "</span> + stringList);

        <span class="hljs-comment">// Adding an element at a specific index</span>
        stringList.add(<span class="hljs-number">1</span>, <span class="hljs-string">"Mango"</span>);

        <span class="hljs-comment">// Removing an element by index</span>
        stringList.remove(<span class="hljs-number">2</span>);

        <span class="hljs-comment">// Displaying the modified List</span>
        System.out.println(<span class="hljs-string">"Modified List: "</span> + stringList);

        <span class="hljs-comment">// Retrieving elements by index</span>
        System.out.println(<span class="hljs-string">"Element at index 0: "</span> + stringList.get(<span class="hljs-number">0</span>));

        <span class="hljs-comment">// Checking if the List contains a specific element</span>
        System.out.println(<span class="hljs-string">"Contains 'Banana': "</span> + stringList.contains(<span class="hljs-string">"Banana"</span>));

        <span class="hljs-comment">// Getting the size of the List</span>
        System.out.println(<span class="hljs-string">"Size of the List: "</span> + stringList.size());
    }
}</code></pre></div>
<h3 id="output-explanation-2">Output Explanation:</h3>
<ul>
<li>The code creates a <code>List</code> of strings using <code>ArrayList</code> and adds elements “Apple”, “Banana”, and “Orange” to it.</li>
<li>It demonstrates adding an element “Mango” at index 1 and removing an element at index 2.</li>
<li>The code displays the modified <code>List</code>, retrieves an element at index 0, checks if it contains “Banana”, and gets the size of the <code>List</code>.</li>
</ul>
<h3 id="summary-2">Summary:</h3>
<ul>
<li>The <code>List</code> interface in Java provides a flexible and feature-rich way to work with ordered collections of elements.</li>
<li>It allows for efficient access to elements by index and supports various operations for adding, removing, and manipulating elements.</li>
<li>Understanding and utilizing the capabilities of the <code>List</code> interface can help in implementing data structures and algorithms effectively in Java applications.</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[One-Dimensional Arrays Part-2]]></title>
            <guid>af8d7dbd15f44bce880aa0061c67192b</guid>
            <pubDate>Sun, 30 Jun 2024 18:07:12 GMT</pubDate>
            <content:encoded><![CDATA[<p>One-dimensional array code example :</p>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.io.*;
<span class="hljs-keyword">import</span> java.util.*;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Java1DArray</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);
        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Integer.parseInt(scanner.nextLine());
        
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t; i++) {
            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();
            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> scanner.nextInt();
            <span class="hljs-type">int</span>[] arr = readArray(scanner, n);
            solve(n, m, arr);
        }
        
        scanner.close();
    }
    
    <span class="hljs-comment">// Method to read an array of integers</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] readArray(Scanner scanner, <span class="hljs-type">int</span> n) {
        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];
        
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) {
            arr[j] = scanner.nextInt();
        }
        
        <span class="hljs-keyword">return</span> arr;
    }
    
    <span class="hljs-comment">// Method to solve the problem</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span>[] arr)</span> {
        <span class="hljs-keyword">if</span> (canWin(n, m, arr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n], <span class="hljs-number">0</span>)) {
            System.out.println(<span class="hljs-string">"YES"</span>);
        } <span class="hljs-keyword">else</span> {
            System.out.println(<span class="hljs-string">"NO"</span>);
        }
    }
    
    <span class="hljs-comment">// Recursive method to check if the game can be won</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canWin</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span>[] arr, <span class="hljs-type">boolean</span>[] visited, <span class="hljs-type">int</span> curr)</span> {
        <span class="hljs-keyword">if</span> (curr + m &gt;= n || curr + <span class="hljs-number">1</span> == n) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        }
        
        <span class="hljs-type">boolean</span>[] newVisited = Arrays.copyOf(visited, n);
        
        <span class="hljs-type">boolean</span> <span class="hljs-variable">canMove</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">if</span> (isValidMove(curr + <span class="hljs-number">1</span>, n, arr, visited)) {
            newVisited[curr + <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;
            canMove = canWin(n, m, arr, newVisited, curr + <span class="hljs-number">1</span>);
        }
        
        <span class="hljs-keyword">if</span> (canMove) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        }
        
        <span class="hljs-keyword">if</span> (m &gt; <span class="hljs-number">1</span> &amp;&amp; isValidMove(curr + m, n, arr, visited)) {
            newVisited[curr + m] = <span class="hljs-literal">true</span>;
            canMove = canWin(n, m, arr, newVisited, curr + m);
        }
        
        <span class="hljs-keyword">if</span> (canMove) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        }
        
        <span class="hljs-keyword">if</span> (curr &gt; <span class="hljs-number">0</span> &amp;&amp; isValidMove(curr - <span class="hljs-number">1</span>, n, arr, visited)) {
            newVisited[curr - <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;
            canMove = canWin(n, m, arr, newVisited, curr - <span class="hljs-number">1</span>);
        }
        
        <span class="hljs-keyword">return</span> canMove;
    }
    
    <span class="hljs-comment">// Method to check if the move is valid</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValidMove</span><span class="hljs-params">(<span class="hljs-type">int</span> move, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span>[] arr, <span class="hljs-type">boolean</span>[] visited)</span> {
        <span class="hljs-keyword">return</span> move &gt;= <span class="hljs-number">0</span> &amp;&amp; move &lt; n &amp;&amp; arr[move] == <span class="hljs-number">0</span> &amp;&amp; !visited[move];
    }
}</code></pre></div>
<p><strong>Sample Input</strong></p>
<pre style="background:linear-gradient(to right, #F3F7EC, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
STDIN           Function
-----           --------
4               q = 4 (number of queries)
5 3             game[] size n = 5, leap = 3 (first query)
0 0 0 0 0       game = [0, 0, 0, 0, 0]
6 5             game[] size n = 6, leap = 5 (second query)
0 0 0 1 1 1     . . .
6 3
0 0 1 1 1 0
3 1
0 1 0
</pre>
<p><strong>Sample Output</strong></p>
<pre style="background:linear-gradient(to right, #FFE6E6, white);color:#3F4E4F;padding:5px" class="jop-noMdConv">
YES
YES
NO
NO
</pre>
<h2 id="elucidation">Elucidation</h2>
<p>This Java program is designed to solve a problem related to a game where the player needs to determine if they can win by making specific moves within an array. Here’s a detailed explanation of the code:</p>
<ol>
<li>
<p>The <code>Java1DArray</code> class is defined, serving as the main class for the program.</p>
</li>
<li>
<p>The <code>main</code> method is the entry point of the program. It performs the following tasks:</p>
<ul>
<li>Creates a new <code>Scanner</code> object named <code>scanner</code> to read input from the console.</li>
<li>Reads an integer value <code>t</code> from the input, representing the number of test cases.</li>
<li>Iterates through each test case:
<ul>
<li>Reads two integer values <code>n</code> and <code>m</code> from the input, where <code>n</code> represents the size of the array and <code>m</code> is a parameter for solving the problem.</li>
<li>Calls the <code>readArray</code> method to read an array of integers with size <code>n</code>.</li>
<li>Calls the <code>solve</code> method to determine if the game can be won with the given parameters.</li>
</ul>
</li>
<li>Closes the <code>Scanner</code> object to release system resources.</li>
</ul>
</li>
<li>
<p>The <code>readArray</code> method is a helper method that reads an array of integers from the input using the provided <code>Scanner</code> object. It takes two parameters:</p>
<ul>
<li><code>scanner</code>: The <code>Scanner</code> object for reading input.</li>
<li><code>n</code>: The size of the array to be read.<br />
Inside the method:</li>
<li>It initializes an integer array <code>arr</code> with size <code>n</code>.</li>
<li>Reads <code>n</code> integer values from the input and stores them in the <code>arr</code> array.</li>
<li>Returns the populated array.</li>
</ul>
</li>
<li>
<p>The <code>solve</code> method is responsible for determining whether the game can be won based on the given parameters. It takes three parameters:</p>
<ul>
<li><code>n</code>: The size of the array.</li>
<li><code>m</code>: The parameter for solving the problem.</li>
<li><code>arr</code>: The array of integers.<br />
Inside the method:</li>
<li>Calls the <code>canWin</code> method to recursively check if the game can be won with the current state of the array and player position.</li>
<li>Prints “YES” if the game can be won, and “NO” otherwise.</li>
</ul>
</li>
<li>
<p>The <code>canWin</code> method is a recursive function that checks if the game can be won by making valid moves within the array. It takes five parameters:</p>
<ul>
<li><code>n</code>: The size of the array.</li>
<li><code>m</code>: The parameter for solving the problem.</li>
<li><code>arr</code>: The array of integers.</li>
<li><code>visited</code>: An array to track visited positions.</li>
<li><code>curr</code>: The current position in the array.<br />
Inside the method:</li>
<li>Checks if the current position allows for a winning move. If so, it returns <code>true</code>.</li>
<li>Creates a copy of the <code>visited</code> array to prevent modifying the original.</li>
<li>Recursively explores possible moves in the array based on the game rules.</li>
<li>Returns <code>true</code> if a winning move is found, <code>false</code> otherwise.</li>
</ul>
</li>
<li>
<p>The <code>isValidMove</code> method checks if a move to a specific position in the array is valid. It takes four parameters:</p>
<ul>
<li><code>move</code>: The target position to move to.</li>
<li><code>n</code>: The size of the array.</li>
<li><code>arr</code>: The array of integers.</li>
<li><code>visited</code>: An array to track visited positions.<br />
It returns <code>true</code> if the move is within bounds, the position is empty, and has not been visited before; otherwise, it returns <code>false</code>.</li>
</ul>
</li>
</ol>
<p>Overall, this code implements a game-solving algorithm using recursion and array manipulation to determine if the player can win the game based on the given parameters.</p>
<hr />
<h2 id="integerparseint-method"><code>Integer.parseInt</code> method</h2>
<p>In Java, the <code>Integer.parseInt</code> method is used to convert a <code>String</code> to an <code>int</code> value. Here is a detailed explanation along with a code example:</p>
<h3 id="explanation">Explanation:</h3>
<ul>
<li>The <code>Integer.parseInt</code> method is a static method of the <code>Integer</code> class in Java.</li>
<li>It takes a <code>String</code> as input and parses it to an <code>int</code> value.</li>
<li>If the <code>String</code> represents a valid integer value, the method converts it to an <code>int</code>.</li>
<li>If the <code>String</code> does not represent a valid integer (contains non-numeric characters or is empty), it throws a <code>NumberFormatException</code>.</li>
<li>The method ignores leading and trailing whitespaces in the <code>String</code> while parsing.</li>
<li>It can handle both positive and negative integer values.</li>
</ul>
<h3 id="code-example">Code Example:</h3>
<div><pre class="hljs"><code><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParseIntExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-comment">// Valid integer strings</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">numStr1</span> <span class="hljs-operator">=</span> <span class="hljs-string">"123"</span>;
        <span class="hljs-type">String</span> <span class="hljs-variable">numStr2</span> <span class="hljs-operator">=</span> <span class="hljs-string">"-456"</span>;
        
        <span class="hljs-comment">// Parsing valid integer strings</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> Integer.parseInt(numStr1);
        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> Integer.parseInt(numStr2);
        
        System.out.println(<span class="hljs-string">"Parsed integers:"</span>);
        System.out.println(<span class="hljs-string">"num1: "</span> + num1); <span class="hljs-comment">// Output: 123</span>
        System.out.println(<span class="hljs-string">"num2: "</span> + num2); <span class="hljs-comment">// Output: -456</span>
        
        <span class="hljs-comment">// Invalid integer string</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">invalidStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">"abc"</span>;
        
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">// Parsing invalid integer string</span>
            <span class="hljs-type">int</span> <span class="hljs-variable">invalidNum</span> <span class="hljs-operator">=</span> Integer.parseInt(invalidStr); <span class="hljs-comment">// This will throw a NumberFormatException</span>
        } <span class="hljs-keyword">catch</span> (NumberFormatException e) {
            System.out.println(<span class="hljs-string">"Error: "</span> + e.getMessage()); <span class="hljs-comment">// Output: Error: For input string: "abc"</span>
        }
    }
}</code></pre></div>
<p>In this code example:</p>
<ul>
<li>We have valid integer strings <code>numStr1</code> and <code>numStr2</code> representing integers <code>123</code> and <code>-456</code> respectively.</li>
<li>We use <code>Integer.parseInt</code> to parse these valid integer strings and store the parsed <code>int</code> values in <code>num1</code> and <code>num2</code>.</li>
<li>We demonstrate how <code>Integer.parseInt</code> can handle valid integer strings and convert them to <code>int</code> values.</li>
<li>We also have an invalid integer string <code>invalidStr</code> containing non-numeric characters.</li>
<li>We try to parse this invalid string using <code>Integer.parseInt</code>, which will throw a <code>NumberFormatException</code>.</li>
<li>We use a try-catch block to catch the exception and print the error message.</li>
</ul>
<hr />
<h2 id="arrayscopyof-method"><code>Arrays.copyOf</code> method</h2>
<p>In Java, the <code>Arrays.copyOf</code> method is used to create a copy of an array with a specified length. Here is a detailed explanation along with a code example:</p>
<h3 id="explanation-2">Explanation:</h3>
<ul>
<li>The <code>Arrays.copyOf</code> method is a static method in the <code>java.util.Arrays</code> class.</li>
<li>It creates a new array and copies elements from the original array to the new array.</li>
<li>The method takes two parameters: the original array to be copied and the length of the new array.</li>
<li>If the specified length is greater than the length of the original array, the additional elements are filled with default values (0 for numeric types, null for reference types).</li>
<li>If the specified length is less than the length of the original array, only the elements up to the specified length are copied.</li>
<li>This method provides a convenient way to resize an array or create a copy of an array with a different length.</li>
</ul>
<h3 id="code-example-2">Code Example:</h3>
<div><pre class="hljs"><code><span class="hljs-keyword">import</span> java.util.Arrays;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyOfExample</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-type">int</span>[] originalArray = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>};
        
        <span class="hljs-comment">// Creating a copy of the original array with a larger length</span>
        <span class="hljs-type">int</span>[] copiedArray1 = Arrays.copyOf(originalArray, <span class="hljs-number">7</span>);
        
        System.out.println(<span class="hljs-string">"Copied Array 1:"</span>);
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : copiedArray1) {
            System.out.print(num + <span class="hljs-string">" "</span>); <span class="hljs-comment">// Output: 1 2 3 4 5 0 0 </span>
        }
        System.out.println();
        
        <span class="hljs-comment">// Creating a copy of the original array with a smaller length</span>
        <span class="hljs-type">int</span>[] copiedArray2 = Arrays.copyOf(originalArray, <span class="hljs-number">3</span>);
        
        System.out.println(<span class="hljs-string">"Copied Array 2:"</span>);
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : copiedArray2) {
            System.out.print(num + <span class="hljs-string">" "</span>); <span class="hljs-comment">// Output: 1 2 3</span>
        }
        System.out.println();
        
        <span class="hljs-comment">// Creating a copy of the original array with the same length</span>
        <span class="hljs-type">int</span>[] copiedArray3 = Arrays.copyOf(originalArray, originalArray.length);
        
        System.out.println(<span class="hljs-string">"Copied Array 3:"</span>);
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : copiedArray3) {
            System.out.print(num + <span class="hljs-string">" "</span>); <span class="hljs-comment">// Output: 1 2 3 4 5</span>
        }
        System.out.println();
    }
}</code></pre></div>
<p>In this code example:</p>
<ul>
<li>We have an original array <code>originalArray</code> containing integers <code>{1, 2, 3, 4, 5}</code>.</li>
<li>We use <code>Arrays.copyOf</code> to create copies of the original array with different lengths.</li>
<li><code>copiedArray1</code> is created with a larger length (7), so additional elements are filled with default values (0 in this case).</li>
<li><code>copiedArray2</code> is created with a smaller length (3), so only the first 3 elements of the original array are copied.</li>
<li><code>copiedArray3</code> is created with the same length as the original array, resulting in an exact copy of the original array.</li>
<li>We demonstrate how <code>Arrays.copyOf</code> can be used to resize an array or create copies with different lengths.</li>
</ul>
]]></content:encoded>
        </item>
    </channel>
</rss>